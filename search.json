[{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"load-packages","dir":"Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/enteric_fever_example.html","id":"funding","dir":"Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/installation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Serocalculator package installation manual","text":"Package serocalculator written programming language R end user must access working installation R engine. document describes common setup R installed locally user’s computer. screenshots refer classical R interface, package can also opened Graphical User Interfaces R like e.g.  RStudio.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/installation.html","id":"installation-steps","dir":"Articles","previous_headings":"","what":"2. Installation steps","title":"Serocalculator package installation manual","text":"R free software program can downloaded http://cran.r-project.org/. downloading appropriate version computer’s operating system, install R computer following standard procedure applicable operating system. Windows file downloaded -called base distribution: http://cran.r-project.org/bin/windows/base/.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/installation.html","id":"installing-r","dir":"Articles","previous_headings":"2. Installation steps","what":"2.1. Installing R","title":"Serocalculator package installation manual","text":"Start R installer follow presented steps:  advised R installed folder contain spaces, therefore please adjust destination location accordingly:  serocalculator package compatible 32-bit 64-bit version R. Choose preferred platform (). unsure install 32-bit version , however compatible platforms 64-bit version may provide better performance:  advised select Registry entries next step best experience:  R interpreter, installed Windows, can invoked start menu folder named R. Start preferred version R (32-bit: R i386 64-bit: x64 installed). Graphical user interface R interpreter start new window:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/installation.html","id":"installing-serocalculator-package","dir":"Articles","previous_headings":"2. Installation steps","what":"2.2. Installing serocalculator package","title":"Serocalculator package installation manual","text":"Since new installation R, serocalculator package must installed first use. 09/20/2023, serocalculator still development. install development version, must install devtools package download serocalculator GitHub.","code":"install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/articles/installation.html","id":"post-installation","dir":"Articles","previous_headings":"","what":"3. Post-installation","title":"Serocalculator package installation manual","text":"Successful installation can confirmed loading package workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator  # Show tutorial for the package. vignette(topic = \"tutorial\", package = \"serocalculator\") # Show description. packageDescription(\"serocalculator\") ## Package: serocalculator ## Type: Package ## Title: Estimating Infection Rates from Serological Data ## Version: 0.1.0.9000 ## Date: 2022-03-29 ## Authors@R: c( person(given = \"Peter\", family = \"Teunis\", email = ##         \"p.teunis@emory.edu\", role = c(\"aut\", \"cph\"), comment = \"Author ##         of the method and original code.\"), person(given = \"Kristina\", ##         family = \"Lai\", role = c(\"aut\")), person(given = \"Kristen\", ##         family = \"Aiemjoy\", email = \"kaiemjoy@ucdavis.edu\", role = ##         c(\"aut\")), person(given = \"Douglas Ezra\", family = \"Morrison\", ##         email = \"demorrison@ucdavis.edu\", role = c(\"aut\", \"cre\"))) ## Description: Translates antibody levels measured in cross-sectional ##         population samples into estimates of the frequency with which ##         seroconversions (infections) occur in the sampled populations. ##         Replaces the previous `seroincidence` package. ## Depends: R (>= 3.5.0) ## License: GPL-3 ## Imports: dplyr (>= 1.1.1), magrittr, parallel, Rcpp, rlang, stats, ##         tibble, tidyr, utils ## Suggests: knitr, rmarkdown, pander, Hmisc, tidyverse, fs, testthat (>= ##         3.0.0), readr, ggplot2, bookdown, doParallel ## VignetteBuilder: knitr ## LazyData: true ## Encoding: UTF-8 ## URL: https://github.com/UCD-SERG/serocalculator, ##         https://ucd-serg.github.io/serocalculator/ ## RoxygenNote: 7.2.3.9000 ## NeedsCompilation: yes ## LinkingTo: Rcpp ## Language: en-US ## Roxygen: list(markdown = TRUE) ## Config/testthat/edition: 3 ## Packaged: 2023-11-21 17:05:23 UTC; runner ## Author: Peter Teunis [aut, cph] (Author of the method and original ##         code.), Kristina Lai [aut], Kristen Aiemjoy [aut], Douglas Ezra ##         Morrison [aut, cre] ## Maintainer: Douglas Ezra Morrison <demorrison@ucdavis.edu> ## Built: R 4.3.2; x86_64-pc-linux-gnu; 2023-11-21 17:05:27 UTC; unix ## RemotePkgRef: local::. ## RemoteType: local ##  ## -- File: /home/runner/work/_temp/Library/serocalculator/Meta/package.rds # Show citation. citation(\"serocalculator\") ## To cite package 'serocalculator' in publications use: ##  ##   Teunis P, Lai K, Aiemjoy K, Morrison D (2022). _serocalculator: ##   Estimating Infection Rates from Serological Data_. R package version ##   0.1.0.9000, https://ucd-serg.github.io/serocalculator/, ##   <https://github.com/UCD-SERG/serocalculator>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {serocalculator: Estimating Infection Rates from Serological Data}, ##     author = {Peter Teunis and Kristina Lai and Kristen Aiemjoy and Douglas Ezra Morrison}, ##     year = {2022}, ##     note = {R package version 0.1.0.9000,  ## https://ucd-serg.github.io/serocalculator/}, ##     url = {https://github.com/UCD-SERG/serocalculator}, ##   }"},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"defining-incidence","dir":"Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"modeling-assumptions","dir":"Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"standard-error","dir":"Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"antibody-response-curves","dir":"Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"composing-the-likelihood","dir":"Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"model-for-active-infection-period","dir":"Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"putting-it-all-together-1","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"biological-noise","dir":"Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/methodology.html","id":"measurement-noise","dir":"Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"load-packages","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"load-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/scrubTyphus_example.html","id":"funding","dir":"Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis, Eijkeren, et al. (2012), developed deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"methods-for-estimating-seroincidence","dir":"Articles","previous_headings":"Further reading","what":"Methods for estimating seroincidence","title":"Introduction to serocalculator","text":"Teunis Eijkeren (2020) Teunis et al. (2016)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"applications","dir":"Articles","previous_headings":"Further reading","what":"Applications","title":"Introduction to serocalculator","text":"Aiemjoy et al. (2022) Aiemjoy, Rumunu, Juma John Hassen (2022) Monge et al. (2018) Kretzschmar, Teunis, Pebody (2010) Simonsen et al. (2007) Simonsen et al. (2010) Falkenhorst et al. (2012) Teunis, Falkenhorst, et al. (2012) Demelker et al. (2006)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/serocalculator.html","id":"quantification-of-seroresponse","dir":"Articles","previous_headings":"Further reading","what":"Quantification of seroresponse","title":"Introduction to serocalculator","text":"deGraaf et al. (2014) Berbers et al. (2013) Versteegh et al. (2005) Teunis et al. (2002)","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim_pop_data(   curve_params = dmcmc,   lambda = lambda,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = TRUE,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.424   0.001   0.424 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim_pop_data_multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n_samples = nrep,     age_range = lifespan,     antigen_isos = antibodies,     renew_params = TRUE,     add_noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.150   0.025  17.005 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Serocalculator package tutorial","text":"Antibody levels measured (cross–sectional) population sample can translated estimate frequency seroconversions (infections) occur sampled population. simple terms: presence many high antibody concentrations indicates many subjects likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. information ELISA methods can found ECDC web site. order thus interpret measured cross-sectional antibody concentrations, characteristics time course serum antibody response must known. antibody detected cross–sectional sample, quantitative description dynamics following infection (seroconversion elevated concentration, followed gradual decrease) must available. published studies, information time course serum antibody response obtained follow–data subjects symptomatic episode following infection. onset symptoms thus provided proxy time infection occurred. Care must taken longitudinal cross–sectional measurements antibody concentrations calibrated scale (, preferably, expressed identical units). time course serum antibody response infection assumed generic: anyone infected pathogen expected produce response similar seen symptomatic cohort used follow–study. Thus, strategy set longitudinal model follow–study , use thus obtained information analyze many different cross–sectional data sets. Note must assumed variation time course antibody concentrations among individuals observed longitudinal cohort population cross-sectional sample taken, variation observed. Analysis longitudinal data estimation required parameters separated estimation seroincidences, (1) longitudinal data sets available difficult (expensive) obtain, (2) longitudinal models may considered generic, presumably describing physiological phenomenon similiar infected individual, (3) setting running longitudinal model requires additional skills, necessary use sero–incidence calculator script","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"the-seroincidence-estimator","dir":"Articles","previous_headings":"","what":"The seroincidence estimator","title":"Serocalculator package tutorial","text":"Package serocalculator designed calculate incidence seroconversion, using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated, function (longitudinal) seroresponse frequency seroconversion (seroincidence). Given seroresponse, (marginal) distribution antibody concentrations can fitted cross-sectional data, adjusting seroconversion frequency, thus providing means estimate seroconversion frequency.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"time-course-of-serum-antibodies","dir":"Articles","previous_headings":"The seroincidence estimator","what":"Time course of serum antibodies","title":"Serocalculator package tutorial","text":"seroresponse, time course serum antibodies following seroconversion (infection) described means set parameters describing . parameters may include: baseline antibody concentration, time reach peak antibody concentration, magnitude peak concentration, antibody decay parameters describing time course (shape rate) antibody decay. model description used serocalculator described (Simonsen et al. 2009; P. Teunis et al. 2012). alternative model, simplified improved interpretation underlying biological mechanisms, given (Graaf et al. 2014) improved (P. F. M. Teunis et al. 2016). current model assumes upon exposure initial inoculum, pathogen concentrations increase exponentially. Presence pathogens (antigen presented immune system) signals increase antibody production, resulting exponentially increasing serum antibody concentrations. Increased activity immune system, signalled circulating antibodies, causes inactivation die–pathogens, rate proportional serum antibody concentration. Ultimately, pathogens removed, infection promotion antibody production stops. decay phase starts, serum antibody concentrations decrease. Antibody decay serum compartment may start fast slow later, resulting non–exponential decay. (P. F. M. Teunis et al. 2016) modelled using shape parameter, allowing gradual adjustment exponential (log–linear) strongly non–exponential decay.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"heterogenity","dir":"Articles","previous_headings":"The seroincidence estimator","what":"Heterogenity","title":"Serocalculator package tutorial","text":"five parameters describing seroresponse (round brackets names corresponding parameters used package, see section 3.2.2 details): baseline antibody concentration (y0 yb), time peak (t1), peak antibody concentration (y1), decay rate (alpha) shape factor decay curve (r) fixed numbers. population subjects, individuals seroresponse, different subjects. Therefore, parameters provided (joint) distribution, describing variation among individuals sampled population. course, distribution depends pathogen, detected antibody, even detection assay. Estimates seroresponse parameters may obtained fitting model longitudinal data. Typically, data collected patients confirmed infection, time infection detected appearance symptoms. Ideally, blood samples taken several times post infection, period long enough reliably estimate shape serum antibody decay curve. Bayesian hierarchical framework allows individual variation seroresponses, one obtains (posterior) joint distribution parameters (Markov chain) Monte Carlo sample, relevant parameters (P. F. M. Teunis et al. 2016). Note , due limited number iterations Monte Carlo sample, generated incidence estimates show minor variations: calculation run twice, outcomes may differ slightly. variation smaller, size Monte Carlo sample may increased. however slow calculations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"incidence-estimation","dir":"Articles","previous_headings":"The seroincidence estimator","what":"Incidence estimation","title":"Serocalculator package tutorial","text":"longitudinal seroresponses considered generic: represent time course (specific) human serum antibodies (specific) pathogen. Therefore, cross–sectional sample antibodies human population, incidence estimate can calculated. Given longitudinal response characteristics, serocalculator R package provide rapid computationally simple method calculating seroconversion rates, published (P. Teunis et al. 2012). methods seroincidence calculator based developed publicly funded research. procedures published open general public, including core script seroincidence calculator based. make functionalities provided broadly available possible, R chosen computing platform, free open source, runs modern computer operating system.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"model-variants","dir":"Articles","previous_headings":"The seroincidence estimator","what":"Model variants","title":"Serocalculator package tutorial","text":"package contains longitudinal models seroincidence calculations. Four model variants possible, depending whether seroconversion instantaneous (\\(t_{1} = 0\\)) (\\(t_{1} > 0\\)), whether decay exponential (\\(r = 1\\)) proceeds power function (\\(r > 1\\)). Power function decay allows rapid inital decay followed sustained period slow decay (4?). Available model variants described Table @ref(tab:model-variants) Table @ref(tab:model-variants-available). (#tab:model-variants) Model variants (#tab:model-variants-available) Models variants available pathogen, antibody, units:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"how-to-use-serocalculator-package","dir":"Articles","previous_headings":"","what":"How to use serocalculator package","title":"Serocalculator package tutorial","text":"section provides step--step directions usage serocalculator package.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"loading-the-package","dir":"Articles","previous_headings":"How to use serocalculator package","what":"Loading the package","title":"Serocalculator package tutorial","text":"Functionality serocalculator package made available end user library loaded current workspace. Assuming package installed already (covered installation.pdf) loading achieved running following command R console (bear mind text character # comment): moment functions required run seroincidence calculation made available. can checked running: resulting output: briefly describe important objects functions: [DISEASE]Params[MODEL_TYPE]: Monte Carlo sample longitudinal response parameters per antibody various diseases: Campylobacter, Pertussis, Salmonella. Object class: list. [DISEASE]Sim[Low|Medium|High]Data: Example simulated antibody levels data measured cross-sectional population three values lambda (incidence): 0.036 (“Low”), 0.21 (“Medium”) 1.15 (“High”) (1/yr). Object class: data.frame. getAdditionalData: Utility function downloading additional longitudinal response parameters online repository. Files available download coxiellaIFAParams4.zip yersiniaSSIParams4.zip. Object class: function. est.incidence.: Main function package. Estimates seroincidence based supplied cross-section antibody levels data longitudinal response parameters. Object class: function.","code":"# Load package \"seroincidence\" library(serocalculator) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union # List all objects (functions and data) exposed by package \"serocalculator\". ls(\"package:serocalculator\") ##  [1] \"campylobacterDelftParams1\"  \"campylobacterDelftParams3\"  ##  [3] \"campylobacterDelftParams4\"  \"campylobacterSimHighData\"   ##  [5] \"campylobacterSimLowData\"    \"campylobacterSimMediumData\" ##  [7] \"campylobacterSSIParams1\"    \"campylobacterSSIParams2\"    ##  [9] \"campylobacterSSIParams4\"    \"est.incidence\"              ## [11] \"est.incidence.by\"           \"fdev\"                       ## [13] \"getAdditionalData\"          \"pertussisIgGPTParams1\"      ## [15] \"pertussisIgGPTParams2\"      \"pertussisIgGPTParams3\"      ## [17] \"pertussisIgGPTParams4\"      \"pertussisSimHighData\"       ## [19] \"pertussisSimLowData\"        \"pertussisSimMediumData\"     ## [21] \"postprocess_fit\"            \"salmonellaSSIParams1\"       ## [23] \"salmonellaSSIParams2\"       \"salmonellaSSIParams4\"       ## [25] \"typhoid_controls\"           \"typhoid_noise_params\""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"specifying-input-data","dir":"Articles","previous_headings":"How to use serocalculator package","what":"Specifying input data","title":"Serocalculator package tutorial","text":"two sets inputs serology calculator must always specified: Simulated antibody levels measured cross-sectional population sample (see campylobacterSimLowData, campylobacterSimMediumData, etc. ). Longitudinal response characteristic set parameters (y1, alpha, yb, r, y0, mu1, t1) (see campylobacterDelftParams1, campylobacterSSIParams2, etc. ). start loading antibody levels measured cross-sectional population sample.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"specifying-cross-sectional-antibody-levels-data","dir":"Articles","previous_headings":"How to use serocalculator package > Specifying input data","what":"Specifying cross-sectional antibody levels data","title":"Serocalculator package tutorial","text":"user options providing data calculator: ) Using supplied sample data Data set campylobacterSimMediumData provides example cross-sectional antibody levels data Campylobacter. loaded workspace soon package loaded, therefore can referenced right away. small exempt data set: Let us create serology data serologyData based data set: can view data also tabular form: shall pass object later calculator. Object serologyData must contain least one column named IgG, IgM, IgA. Additionally, column Age used calculations present. Otherwise, created --fly initialized NA (available). Column Age, supplied, assumed represent age days. Please, note cross-sectional data set can include extra columns allowing performing seroincidence calculations stratified per factors available data. example column AgeCat can used stratum variable. particular variable created mapping age days (column Age) 15 categories, category 1 grouping youngest subjects category 15 grouping oldest subjects. ii) Loading external files user can load /data R session. Details loading specific file types can found online R manual R Data Import/Export. important input data tabular form column containing levels measured single antibody type. Column name indicate name measured antibody. instance, comma separated file following content: valid cross-sectional data set. Suppose file named c:\\cross-sectional-data.csv. can loaded R like :","code":"# Show three first rows of \"campylobacterSimMediumData\" data.frame. head(campylobacterSimMediumData, 3) ##         Age       IgG        IgM          IgA ## 1  4530.743 0.2242790 0.05442598 1.138591e-02 ## 2  5173.256 0.8498734 0.10667042 2.093677e-06 ## 3 24187.164 0.1849355 1.24958865 1.652755e-01 # Assign data.frame \"campylobacterDelftData\" to object named \"serologyData\". serologyData <- campylobacterSimMediumData |>    mutate(AgeCat = cut(Age, 15, labels = FALSE))  # Print a few first observations. head(serologyData) ##         Age       IgG          IgM          IgA AgeCat ## 1  4530.743 0.2242790 0.0544259797 1.138591e-02      3 ## 2  5173.256 0.8498734 0.1066704172 2.093677e-06      3 ## 3 24187.164 0.1849355 1.2495886495 1.652755e-01     14 ## 4 21427.836 1.1743485 0.0001590331 3.122555e-02     12 ## 5 12560.687 1.0656224 0.0013906805 8.723256e-04      7 ## 6 17083.219 0.1115373 0.4976598547 2.321977e-01     10 View(serologyData) IgG, IgM, IgA 5.337300, 0.4414653, 0.3002395 3.534118, 0.3888226, 0.3543486 2.144549, 0.3320178, 0.3884205 2.957854, 0.4967764, 0.3472340 # Read content of file \"C:\\cross-sectional-data.csv\" into object named  # \"serologyData\". serologyData <- read.csv(file = \"C:\\\\cross-sectional-data.csv\")"},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"longParams","dir":"Articles","previous_headings":"How to use serocalculator package > Specifying input data","what":"Specifying longitudinal response parameters","title":"Serocalculator package tutorial","text":"longitudinal response parameters set consists following items: y1: antibody peak level (ELISA units) alpha: antibody decay rate (1/days current longitudinal parameter sets) yb: baseline antibody level \\(t\\) approaching infinity (\\(y(t->inf)\\)) r: shape factor antibody decay y0: baseline antibody level \\(t=0\\) (\\(y(t=0)\\)) mu1: initial antibody growth rate t1: duration infection Please, refer vignette methodology.pdf details underlying methodology. End user three options loading response parameters R session: ) Using supplied data longitudinal response parameter data sets provided package including Monte-Carlo sample longitudinal response parameters, like campylobacterDelftParams4. particular object list containing three data.frame objects named IgG, IgM IgA. Let’s pick two data sets separately (notice character $ indicating sub-object parent object): Let us assign object campylobacterDelftParams4 variable responseParams: ii) Loading local external files Alternatively, data can loaded external file. Bear mind, likely data organized three files, separately antibody IgG, IgM IgA. Assuming data saved csv files named IgG.csv, IgM.csv IgA.csv end user run following code order create valid input calculator: Note object responseParams list three dataframes named IgG, IgM IgA required. iii) Loading external repository Finally, response parameters can obtained online repository set package. repository hosted ECDC servers. time publishing package two files available: coxiellaIFAParams4.zip: longitudinal response parameters per antibody Coxiella. yersiniaSSIParams4.zip: longitudinal response parameters per antibody Yersinia. Simply use supplied utility function getAdditionalData download data: Internet connection needed function work.","code":"# Show first rows of data.frame \"IgG\" in list \"campylobacterDelftParams4\". head(campylobacterDelftParams4$IgG) ##          y1        alpha yb        r         y0       mu1       t1 ## 1 27.861427 0.0051607511  0 1.019014 0.07791154 0.7296875 8.057456 ## 2  3.306758 0.0011913102  0 1.099056 0.05077868 0.8435221 4.950963 ## 3 18.791581 0.0006869688  0 1.010531 0.09212040 0.6116469 8.694670 ## 4  5.866064 0.0006929407  0 1.019739 0.07694126 0.5232645 8.282421 ## 5 14.364930 0.0035222413  0 1.092096 0.05110497 0.9445758 5.969519 ## 6  5.790477 0.0003697673  0 1.010602 0.09127834 0.7696968 5.391807 # Show first rows of data.frame \"IgM\" in list \"campylobacterDelftParams4\". head(campylobacterDelftParams4$IgM) ##          y1        alpha yb        r         y0       mu1       t1 ## 1 3.0218848 0.0068170529  0 1.073372 0.09900034 0.3980767 8.587573 ## 2 1.4605254 0.0004345318  0 1.042603 0.07462244 0.4741715 6.272224 ## 3 2.1067968 0.0043837064  0 1.068606 0.10507351 0.4748134 6.314615 ## 4 1.1187181 0.0019154929  0 1.071340 0.09971466 0.3124635 7.737306 ## 5 0.4222472 0.0005651563  0 1.000181 0.12935880 0.5040532 2.346977 ## 6 4.5818356 0.0158849155  0 1.071558 0.10262796 0.6777377 5.605037 # Show first rows of data.frame \"IgA\" in list \"campylobacterDelftParams4\". head(campylobacterDelftParams4$IgA) ##          y1        alpha yb        r         y0       mu1        t1 ## 1 2.7471594 0.0235920904  0 2.773443 0.06452524 0.2737697 13.702269 ## 2 0.3361973 0.0001511561  0 1.006182 0.13241137 0.6774068  1.375517 ## 3 1.3402570 0.0072306458  0 1.640734 0.12395023 0.3883815  6.129892 ## 4 7.8335091 0.0028906244  0 2.768401 0.06512216 0.3482461 13.754356 ## 5 0.3069594 0.0029306951  0 1.050954 0.07870162 0.4218624  3.226293 ## 6 1.6315826 0.0044291436  0 1.740029 0.12264517 0.5924527  4.368299 responseParams <- campylobacterDelftParams4 IgGData <- read.csv(file = \"IgG.csv\") IgMData <- read.csv(file = \"IgM.csv\") IgAData <- read.csv(file = \"IgA.csv\")  # Create a list named \"responseData\" containing objects named \"IgG\", \"IgM\" and  # \"IgA\". responseParams <- list(IgG = IgGData, IgM = IgMData, IgA = IgAData) responseParams <- getAdditionalData(\"coxiellaIFAParams4.zip\")"},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"estimating-seroincidence","dir":"Articles","previous_headings":"How to use serocalculator package","what":"Estimating seroincidence","title":"Serocalculator package tutorial","text":"Main calculation function provided package serocalculator called est.incidence.. takes several arguments: data: data frame cross-sectional data (see variable serologyData ). may whole data set loaded file, can also subset, e.g. data = serologyData[1, ] use first row. tutorial data loaded variable serologyData. required input. antibodies: list antibodies used. can triplet (antibodies = c(\"IgG\", \"IgM\", \"IgA\")) single antibody (antibodies = c(\"IgG\")) combination two antibodies. required input. strata: list categories stratify data. column AgeCat example data set can used example. strata = \"\" (default), whole data set treated single stratum; sample assigned unique identifier (e.g. strata = \"AgeCat\") many strata samples incidence estimate calculated sample. specified, strata initialized \"\". params: list longitudinal parameters antibodies specified. tutorial data loaded variable responseParams. required input. censorLimits: list cutoff levels, one antibody used. antibody levels observations treated censored. required input. par0: List parameters (lognormal) distribution antibody concentrations true seronegatives (.e. never seroconverted), named antibody type (corresponding data). start starting value log.lambda. Value -6 corresponds roughly 1 day (log(1/365.25)), value -4 corresponds roughly 1 week (log(7/365.25)). Users adivised experiment value confirm convergence estimate obtained. Default -6. numCores Number processor cores use calculations computing strata. set 1 R package parallel available (installed default), computations stratum executed parallel. Default 1, ie. execution parallel. example Campylobacter seroincidence calculation three antibodies measured, stratified per AgeCat, measurements 0.1 removed: following text printed. important output subobject Fits containing raw results output incidence. Translation raw results provided custom function summary explained following section. cutoff argument based censoring observed serum antibody measurements (Strid et al. 2001). Cut-levels must always specified calling function est.incidence.(argument censorLimits). Value 0 set antibody measurements censoring needed, instance Using different censoring levels produce different results. Choosing higher cut-causes estimates lambda decrease. Results published together chosen cut-values. cut-level 0.1 set example typical value, users set value reflecting censoring level data.","code":"# Prepare input data. serologyData <- campylobacterSimMediumData |>    mutate(     AgeCat = cut(Age, 15, labels = FALSE),     Age = NA)      responseParams <- campylobacterDelftParams4  cutOffs <- list(IgG = 0.1, IgM = 0.1, IgA = 0.1)  # Baseline distributions: the distributions of antibody concentrations in  # subjects who have never seroconverted. baseLine <- list(IgG = c(log(0.05), 1),                  IgM = c(log(0.005), 1),                  IgA = c(log(0.005), 1))  # Assign output of function \"est.incidence.by\" to object named  # \"seroincidenceData\". Use all available processor cores. seroincidenceData <- est.incidence.by(   data = serologyData,   antibodies = c(\"IgG\", \"IgM\", \"IgA\"),   strata = \"AgeCat\",   params = responseParams,   censorLimits = cutOffs,   par0 = baseLine,   numCores = parallel::detectCores(),   start = -4)  # Show content of the output variable... print(seroincidenceData) # ...or simply type in the console: 'seroincidenceData' (without \"'\") and  # press ENTER. ## Seroincidence object estimated given the following setup: ## a) Antibodies   : IgG, IgM, IgA ## b) Strata       : AgeCat  ## c) Censor limits:  IgG = 0.1, IgM = 0.1, IgA = 0.1  ##  ## This object is a list containing the following items: ## Fits         - List of outputs of \"optim\" function per stratum. ## Antibodies   - Input parameter antibodies of function \"est.incidence.by\". ## Strata       - Input parameter strata of function \"est.incidence.by\". ## CensorLimits - Input parameter censorLimits of function \"est.incidence.by\". ##  ## Call summary function to obtain output results. censorLimits <- list(IgG = 0, IgM = 0, IgA = 0)"},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"getting-a-summary-of-seroincidence","dir":"Articles","previous_headings":"How to use serocalculator package","what":"Getting a summary of seroincidence","title":"Serocalculator package tutorial","text":"Output calculator passed function summary calculating output results: summary function returns list objects well. contains sub-objects Antibodies, Strata, CensorLimits, Quantiles Results. important sub-object output summary functions Results, containing estimates Lambda (annual incidence) together lower upper bounds (Lambda.lwr Lambda.upr, respectively). default lower bound 2.5% upper bound 97.5% distribution Lambda. values can changed (see examples). Optionally, summary function returns also Deviance (negative log likelihood estimated Lambda) Convergence (indicator returned function stats::optim; value 0 indicates convergence). may beneficial assign output function variable analysis: one may note dataframe six columns can later post-processed custom calculations.","code":"summary(seroincidenceData) ## Seroincidence estimated given the following setup: ## a) Antibodies   : IgG, IgM, IgA  ## b) Strata       : AgeCat  ## c) Censor limits: IgG = 0.1, IgM = 0.1, IgA = 0.1  ## d) Quantiles    : 0.025, 0.975  ##  ##  Seroincidence estimates: ##    Lambda.est Lambda.lwr Lambda.upr  Deviance Convergence Stratum ## 1  0.09721890 0.06397004 0.14774909 105.29815           0       1 ## 2  0.05497303 0.03573489 0.08456817 181.90627           0       2 ## 3  0.04456096 0.02845903 0.06977327 199.99357           0       3 ## 4  0.02944038 0.01715302 0.05052964 141.32558           0       4 ## 5  0.02569781 0.01436524 0.04597053 123.33213           0       5 ## 6  0.02565297 0.01587275 0.04145941 187.41060           0       6 ## 7  0.03458616 0.02012722 0.05943207 128.84486           0       7 ## 8  0.02776873 0.02640621 0.02920154 133.57166          52       8 ## 9  0.04016261 0.02133209 0.07561541  94.99389           0       9 ## 10 0.01996477 0.01898409 0.02099612 104.30992          52      10 ## 11 0.03356017 0.01917771 0.05872886 141.20168           0      11 ## 12 0.05287648 0.03263923 0.08566140 181.68655           0      12 ## 13 0.05081097 0.02946963 0.08760729 123.66670          52      13 ## 14 0.04813104 0.02945312 0.07865371 186.92218           0      14 ## 15 0.03421042 0.02210895 0.05293569 215.78684           0      15 # Compute seroincidence summary and assign to object \"seroincidenceSummary\". seroincidenceSummary <- summary(seroincidenceData)  # Show the results. seroincidenceSummary$Results ##    Lambda.est Lambda.lwr Lambda.upr  Deviance Convergence Stratum ## 1  0.09721890 0.06397004 0.14774909 105.29815           0       1 ## 2  0.05497303 0.03573489 0.08456817 181.90627           0       2 ## 3  0.04456096 0.02845903 0.06977327 199.99357           0       3 ## 4  0.02944038 0.01715302 0.05052964 141.32558           0       4 ## 5  0.02569781 0.01436524 0.04597053 123.33213           0       5 ## 6  0.02565297 0.01587275 0.04145941 187.41060           0       6 ## 7  0.03458616 0.02012722 0.05943207 128.84486           0       7 ## 8  0.02776873 0.02640621 0.02920154 133.57166          52       8 ## 9  0.04016261 0.02133209 0.07561541  94.99389           0       9 ## 10 0.01996477 0.01898409 0.02099612 104.30992          52      10 ## 11 0.03356017 0.01917771 0.05872886 141.20168           0      11 ## 12 0.05287648 0.03263923 0.08566140 181.68655           0      12 ## 13 0.05081097 0.02946963 0.08760729 123.66670          52      13 ## 14 0.04813104 0.02945312 0.07865371 186.92218           0      14 ## 15 0.03421042 0.02210895 0.05293569 215.78684           0      15"},{"path":"https://ucd-serg.github.io/serocalculator/articles/tutorial.html","id":"other-examples","dir":"Articles","previous_headings":"","what":"Other examples","title":"Serocalculator package tutorial","text":"following examples show standard procedure estimating seroincidence.","code":"# 1. Define cross-sectional data. serologyData <- with(campylobacterSimMediumData,                      data.frame(                        IgG = IgG.ratio.new,                        IgM = IgM.ratio.new,                        IgA = IgA.ratio.new))  # 2. Define longitudinal response data responseParams <- campylobacterDelftParams3  # 3. Define cut-offs cutOffs <- list(IgG = 0.25, IgM = 0.25, IgA = 0.25)  # 4. Baseline distributions baseLine <- list(IgG = c(log(0.05), 1),                  IgM = c(log(0.005), 1),                  IgA = c(log(0.005), 1))  # 4a. Calculate a single seroincidence rate for all serum samples... seroincidenceData <- est.incidence.by(   data = serologyData,   antibodies = c(\"IgG\", \"IgM\", \"IgA\"),   strata = \"\",   params = responseParams,   censorLimits = cutOffs,   par0 = baseLine)  # 4b. ...or calculate a single seroincidence rate for a single serum sample  # (triplet of titres)... seroincidenceData <- est.incidence.by(   data = serologyData[1, ],   antibodies = c(\"IgG\", \"IgM\", \"IgA\"),   strata = \"\",   params = responseParams,   censorLimits = cutOffs,   par0 = baseLine)  # 4c. ...or calculate a single seroincidence rate for all serum samples (only IgG) seroincidenceData <- est.incidence.by(   data = serologyData,   antibodies = c(\"IgG\"),   strata = \"\",   params = responseParams,   censorLimits = cutOffs,   par0 = baseLine)  # 5a. Produce summary of the results with 2.5% and 97.5% bounds... summary(seroincidenceData)  # 5b. ...or produce summary of the results with 5% and 95% bounds, do not show  # convergence... summary(seroincidenceData, quantiles = c(0.05, 0.95), showConvergence = FALSE)  # 5c. ...or produce summary and assign to an object... seroincidenceSummary <- summary(seroincidenceData) # ...and work with the results object from now on (here: display the results). seroincidenceSummary$Results"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Typhoid Seroincidence","text":"vignette provides users example analysis using serocalculator package. Users able determine seroincidence typhoid fever sample population using existing longitudinal antibody dynamics collected Bangladesh, Ghana, Nepal, Pakistan, plus simulated cross-sectional serosurvey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"references","dir":"Articles","previous_headings":"Introduction","what":"References","title":"Typhoid Seroincidence","text":"Aiemjoy, K., Seidman, J. C., Saha, S., Munira, S. J., Islam Sajib, M. S., Sium, S. M. al, Sarkar, ., Alam, N., Zahan, F. N., Kabir, M. S., Tamrakar, D., Vaidya, K., Shrestha, R., Shakya, J., Katuwal, N., Shrestha, S., Yousafzai, M. T., Iqbal, J., Dehraj, . F., … Andrews, J. R. (2022). Estimating typhoid incidence community-based serosurveys: multicohort study. Lancet. Microbe, 3(8), e578–e587. https://doi.org/10.1016/S2666-5247(22)00114-8","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"load-packages","dir":"Articles","previous_headings":"Sample Analysis","what":"1. Load packages","title":"Typhoid Seroincidence","text":"first step conducting analysis load necessary packages. Follow [installation instructions] https://ucd-serg.github.io/serocalculator/ already installed serocalculator. (Still development 10/17/2023)","code":"#library(devtools) #install_github(\"UCD-SERG/serocalculator\") library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.3     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"a--load-and-prepare-longitudinal-parameter-data","dir":"Articles","previous_headings":"Sample Analysis > 2. Load data","what":"a. Load and prepare longitudinal parameter data","title":"Typhoid Seroincidence","text":"next step load longitudinal data set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. parameters include following: * y0 = baseline * y1 = peak antibody responses * t1 = time peak * α = decay rate * r = decay shape also create two additional variables, alpha d. Alpha annual decay rate, calculated daily decay rate example. d 1-r, decay shape. _______ Finally, select variables needed analysis.","code":"c.hlye.IgG <-    fs::path_package(                             \"extdata\",    \"dmcmc_hlyeigg_09.30.rds\",    package = \"serocalculator\") |> #Load longitudinal parameters dataset  readRDS()%>%   mutate(alpha = alpha*365.25, #Create alpha and d           d = r-1) %>%   select(y1, alpha, d) #Select only the variables needed for analysis"},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"b--load-and-prepare-simulated-data","dir":"Articles","previous_headings":"Sample Analysis > 2. Load data","what":"b. Load and prepare simulated data","title":"Typhoid Seroincidence","text":"simulated data represent cross-sectional serosurvey conducted representative sample general population without regard disease status. , assuming force infection (FOI, lambda) 0.2. means assume 0.2 cases per person general population time period interest. scenario, selected hlye IgG target measures. Users may select different serologic markers depending available. original dataset, rename variables y . Finally, limit dataset variables needed analysis.","code":"library(fs) # filesystem utility functions p.hlye.IgG  <-    fs::path_package(     package = \"serocalculator\",      \"extdata/simpophlyeigg.2.csv\") %>% #Load simulated cross-sectional dataset   read_csv() %>%   rename( #rename variables     y = y.smpl,     a = a.smpl) %>%    select(y, a) #Select only the variables needed for analysis #> Rows: 500 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (4): a.smpl, y.smpl, i, t #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"c--set-conditions-for-simulated-data","dir":"Articles","previous_headings":"Sample Analysis > 2. Load data","what":"c. Set conditions for simulated data","title":"Typhoid Seroincidence","text":"Next, must set conditions based assumptions simulated data. differ based background knowledge cross-sectional data. [Need , plus simplify variable names]","code":"cond.hlye.IgG <- data.frame(   nu = 1.027239,             # B noise   eps = 0.2,            # M noise   y.low = 0.0,          # low cutoff   y.high = 5e4);"},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"estimate-seroincidence","dir":"Articles","previous_headings":"Sample Analysis","what":"3. Estimate Seroincidence","title":"Typhoid Seroincidence","text":"Finally, ready begin seroincidence estimation. define starting value 0.5, also define initial estimate lambda (FOI). set values confidence interval. (Add explanation section ) [Need information starting estimate vs estimate mentioned simulated data]","code":"start <- .05  lambda = start # initial estimate: starting value log.lambda = log(lambda) log.lmin=log(lambda/10) log.lmax=log(10*lambda)     objfunc <- function(llam){   return(res <- fdev(llam, p.hlye.IgG, c.hlye.IgG, cond.hlye.IgG)) }   fit <- nlm(objfunc,log.lambda,            hessian=TRUE,print.level=0,stepmax=(log.lmax-log.lmin)/4)   #lambda, lower, upper, LF min log.lambda.est <- c(exp(fit$estimate),                     exp(fit$estimate + qnorm(c(0.025))*sqrt(1/fit$hessian)),                     exp(fit$estimate + qnorm(c(0.975))*sqrt(1/fit$hessian)),                     fit$minimum)   log.lambda.est #> [1]    0.2024099    0.1786484    0.2293318 1897.9264766"},{"path":"https://ucd-serg.github.io/serocalculator/articles/typhoid-seroincidence.html","id":"conclusions","dir":"Articles","previous_headings":"Sample Analysis","what":"Conclusions","title":"Typhoid Seroincidence","text":"simulated data, found estimated seroincidence typhoid ______.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9006, https://github.com/UCD-SERG/serocalculator, https://ucd-serg.github.io/serocalculator/.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9006,     https://github.com/UCD-SERG/serocalculator},   url = {https://ucd-serg.github.io/serocalculator/}, }"},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"serocalculator","dir":"","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"installing-r","dir":"","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"installing-the-serocalculator-package","dir":"","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"post-installation","dir":"","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"development-version","dir":"","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"a-note-for-windows-users","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"during-devtools-installation","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"independently","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/index.html","id":"contributing-to-this-project","dir":"","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr212","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr212","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr212","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr212","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr212","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr212","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr212","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr212","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr212","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr212","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr212","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":null,"dir":"Preview > Pr212","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr212","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr212","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr212","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr212","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr212","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr212 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr212 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr212 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/index.html","id":null,"dir":"Preview > Pr212 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"overview","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"standard-error","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr212 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/serocalculator.html","id":"overview","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr212 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr212 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr212 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.435   0.000   0.435 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr212 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> Data has been stratified. #> Here are the strata that will be analyzed: #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> Elapsed time for parallelized code: #>    user  system elapsed  #>   0.151   0.033  17.420 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr212 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/authors.html","id":null,"dir":"Preview > Pr212","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/authors.html","id":"citation","dir":"Preview > Pr212","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2024). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9019, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2024},   note = {R package version 1.2.0.9019,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"serocalculator","dir":"Preview > Pr212","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"installing-r","dir":"Preview > Pr212","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr212","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"post-installation","dir":"Preview > Pr212","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"development-version","dir":"Preview > Pr212","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr212","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"during-devtools-installation","dir":"Preview > Pr212","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"independently","dir":"Preview > Pr212","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"getting-help","dir":"Preview > Pr212","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/index.html","id":"contributing-to-this-project","dir":"Preview > Pr212","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"new-features-development-version","dir":"Preview > Pr212 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr212 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-120","dir":"Preview > Pr212 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-110","dir":"Preview > Pr212 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-101","dir":"Preview > Pr212 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr212 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ab.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ab.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ab.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ab.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_curve_params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_curve_params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" %>%   readr::read_rds() %>%   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_noise_params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_noise_params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" %>%   readr::read_rds() %>%   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_pop_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_pop_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   readr::read_rds() %>%   as_pop_data()  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) %>% # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data %>% autoplot(strata = \"Country\", type = \"density\")  xs_data %>% autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curve,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/check_pop_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/check_pop_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df.to.array.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df_to_array.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df_to_array.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/dot-nll.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/dot-nll.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-section serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":"details","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":"details","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/fdev.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/get_additional_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/get_additional_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph_loglik.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph_loglik.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/index.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set serocalculator serocalculator-package Estimating Infection Rates Serological Data sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ldpar.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ldpar.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/ldpar.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/llik.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/llik.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_curve_params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_curve_params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_noise_params.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_noise_params.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_pop_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_pop_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/log_likelihood.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/log_likelihood.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mk_baseline.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mk_baseline.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mkbaseline.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/mkbaseline.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   dplyr::filter(antigen_iso == \"HlyE_IgG\") %>%   serocalculator::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/reexports.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/serocalculator.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/serocalculator.html","id":"details","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/serocalculator.html","id":"references","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/serocalculator.html","id":"author","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/stratify_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/stratify_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr212/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr212 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr308","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr308","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr308","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr308","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr308","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr308","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr308","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr308","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr308","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr308","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr308","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":null,"dir":"Preview > Pr308","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr308","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr308","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr308","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr308","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr308","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr308 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\", log = TRUE) +   scale_fill_manual(values = country_pal) +   labs(x = \"Log Antibody Response Value\") #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr308 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr308 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge2(reverse = TRUE),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge2(reverse = TRUE)   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroconversion  rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/index.html","id":null,"dir":"Preview > Pr308 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"overview","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"standard-error","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr308 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/serocalculator.html","id":"overview","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr308 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr308 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr308 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.425   0.000   0.425 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr308 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.146   0.029  17.626 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr308 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/authors.html","id":null,"dir":"Preview > Pr308","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/authors.html","id":"citation","dir":"Preview > Pr308","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9005, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9005,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"serocalculator","dir":"Preview > Pr308","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"installing-r","dir":"Preview > Pr308","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr308","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"post-installation","dir":"Preview > Pr308","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"development-version","dir":"Preview > Pr308","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr308","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"during-devtools-installation","dir":"Preview > Pr308","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"independently","dir":"Preview > Pr308","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"getting-help","dir":"Preview > Pr308","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/index.html","id":"contributing-to-this-project","dir":"Preview > Pr308","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr308 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Removed ldpar() API (#345) Added test sim.cs() (#344) Added test internal function ab() (#342) Reverted name change ldpar()-> row_longitudinal_parameter() (#343)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-130","dir":"Preview > Pr308 > News","previous_headings":"","what":"serocalculator 1.3.0","title":"Changelog","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"new-features-1-3-0","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.3.0","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"internal-changes-1-3-0","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.3.0","what":"Internal changes","title":"Changelog","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-120","dir":"Preview > Pr308 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-110","dir":"Preview > Pr308 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-101","dir":"Preview > Pr308 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr308 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ab.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ab.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ab.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab integer indicating row read blims blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ab.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ab.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- ab(t = t, par = par1, blims = blims) #> Error in ab(t = t, par = par1, blims = blims): could not find function \"ab\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_curve_params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_curve_params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_noise_params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_noise_params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_pop_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_pop_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/baseline.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/baseline.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/baseline.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab integer indicating row read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/baseline.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_pop_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_pop_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_strata.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_strata.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_strata.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df.to.array.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df_to_array.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df_to_array.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) #> Error: 'df_to_array' is not an exported object from 'namespace:serocalculator' ftable(arr[,,1:5]) #> Error: object 'arr' not found"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/dot-nll.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/dot-nll.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":"details","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":"details","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/fdev.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph_loglik.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph_loglik.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/index.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ldpar.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ldpar.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/ldpar.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/llik.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/llik.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_curve_params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_curve_params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_noise_params.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_noise_params.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_pop_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_pop_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/log_likelihood.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/log_likelihood.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/mk_baseline.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab integer indicating row read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/mk_baseline.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/reexports.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator.html","id":"details","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator.html","id":"references","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator.html","id":"author","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... additional arguments passed simcs.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed ldpar, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab integer indicating row read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/stratify_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/stratify_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr308/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr308 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr310","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr310","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr310","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr310","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr310","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr310","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr310","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr310","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr310","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr310","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr310","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":null,"dir":"Preview > Pr310","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr310","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr310","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr310","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr310","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr310","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr310 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" |>   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves |> filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") |>   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") |>   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data |> summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data |> autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data |>   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) |>   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data |>   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") |> readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr310 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr310 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(data, strata_varnames): The number of observations in `data` #>             varies between antigen isotypes, for #>             at least one stratum. Sample size for #>             each stratum will be calculated as the #>             minimum number of observations across #>             all antigen isotypes.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) |>   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/index.html","id":null,"dir":"Preview > Pr310 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"overview","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" |>   load_curve_params() |>   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" |>   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") |> readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" |>   load_curve_params() |>   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" |>   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") |> readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"standard-error","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" |>   load_curve_params() |>   filter(iter < 50)  curve1 =   curves |>   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 |> serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" |>   load_curve_params() |>   filter(iter < 50)  curve1 =   curves |>   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 |> serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr310 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" |>   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves |> autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data |> check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data |> summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data |>   group_by(antigen_iso) |>   filter(!is.na(value)) |>   filter(age < 40) |> # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) |> # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = select(strata, : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = select(strata, : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = select(strata, : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = select(strata, : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) |>   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/serocalculator.html","id":"overview","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr310 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr310 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr310 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" |>   load_curve_params() |>   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc |> autoplot(n_curves = 50) dmcmc |> autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc |>   graph.curve.params(antigen_isos = antibodies) |>   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) |>   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) |>   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) |>   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.432   0.000   0.432 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr310 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df |> ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.157   0.020  17.027 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) |>   DT::datatable() |>   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) |>   as_tibble() |> # removes extra meta-data   select(Stratum, nlm.convergence.code) |>   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) |>   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr310 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) |>   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/authors.html","id":null,"dir":"Preview > Pr310","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/authors.html","id":"citation","dir":"Preview > Pr310","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2024). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9023, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2024},   note = {R package version 1.2.0.9023,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"serocalculator","dir":"Preview > Pr310","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"installing-r","dir":"Preview > Pr310","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr310","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"post-installation","dir":"Preview > Pr310","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"development-version","dir":"Preview > Pr310","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr310","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"during-devtools-installation","dir":"Preview > Pr310","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"independently","dir":"Preview > Pr310","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"getting-help","dir":"Preview > Pr310","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/index.html","id":"contributing-to-this-project","dir":"Preview > Pr310","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"new-features-development-version","dir":"Preview > Pr310 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr310 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Replace pipes base R pipes (#310) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-120","dir":"Preview > Pr310 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-110","dir":"Preview > Pr310 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-101","dir":"Preview > Pr310 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr310 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ab.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ab.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ab.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ab.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_curve_params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_curve_params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" |>   readr::read_rds() |>   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_noise_params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_noise_params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" |>   readr::read_rds() |>   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_pop_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_pop_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   \"https://osf.io/download//n6cp3/\" |>   readr::read_rds() |>   as_pop_data()  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso)  |> # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data |> autoplot(strata = \"Country\", type = \"density\")  xs_data |> autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" |>   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   # Reduce dataset for the purposes of this example   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_pop_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_pop_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") |>   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_strata.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_strata.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_strata.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",     \"Count\")): could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df.to.array.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df_to_array.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df_to_array.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris |>   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) |>   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df |>   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/dot-nll.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/dot-nll.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%  # Reduce dataset for the purposes of this example:   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = unique(pop_data$antigen_iso),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":"details","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" |> load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data |>   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) |>   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params |>   dplyr::filter(.data$antigen_iso == cur_antibody) |>   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params |>   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params |>     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":"details","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" |> load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data |>   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) |>   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params |>   dplyr::filter(.data$antigen_iso == cur_antibody) |>   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params |>   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params |>     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/fdev.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/get_additional_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/get_additional_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph_loglik.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph_loglik.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/index.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ldpar.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ldpar.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/ldpar.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/llik.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/llik.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_curve_params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_curve_params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_noise_params.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_noise_params.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_pop_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_pop_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/log_likelihood.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/log_likelihood.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" |>   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) |> print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mk_baseline.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mk_baseline.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mkbaseline.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/mkbaseline.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `|>` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") |>   dplyr::filter(antigen_iso == \"HlyE_IgG\") |>   serocalculator:::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/reexports.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/serocalculator.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/serocalculator.html","id":"details","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/serocalculator.html","id":"references","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/serocalculator.html","id":"author","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/stratify_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = attr(data, \"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/stratify_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   # Reduce dataset for the purposes of this example   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) |>   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data |> filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise |> filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr310/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr310 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr315","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr315","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr315","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr315","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr315","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr315","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr315","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr315","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr315","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr315","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr315","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":null,"dir":"Preview > Pr315","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr315","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr315","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr315","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr315","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr315","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr315 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr315 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr315 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/index.html","id":null,"dir":"Preview > Pr315 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"overview","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"standard-error","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr315 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/serocalculator.html","id":"overview","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr315 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr315 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr315 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.433   0.000   0.434 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr315 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> Data has been stratified. #> Here are the strata that will be analyzed: #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> Elapsed time for parallelized code: #>    user  system elapsed  #>   0.156   0.012  17.041 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr315 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/authors.html","id":null,"dir":"Preview > Pr315","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/authors.html","id":"citation","dir":"Preview > Pr315","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2024). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9020, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2024},   note = {R package version 1.2.0.9020,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"serocalculator","dir":"Preview > Pr315","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"installing-r","dir":"Preview > Pr315","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr315","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"post-installation","dir":"Preview > Pr315","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"development-version","dir":"Preview > Pr315","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr315","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"during-devtools-installation","dir":"Preview > Pr315","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"independently","dir":"Preview > Pr315","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"getting-help","dir":"Preview > Pr315","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/index.html","id":"contributing-to-this-project","dir":"Preview > Pr315","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"new-features-development-version","dir":"Preview > Pr315 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr315 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-120","dir":"Preview > Pr315 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-110","dir":"Preview > Pr315 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-101","dir":"Preview > Pr315 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr315 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ab.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ab.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ab.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ab.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_curve_params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_curve_params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" %>%   readr::read_rds() %>%   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_noise_params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_noise_params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" %>%   readr::read_rds() %>%   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_pop_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_pop_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   readr::read_rds() %>%   as_pop_data()  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  %>% # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data %>% autoplot(strata = \"Country\", type = \"density\")  xs_data %>% autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curve,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/check_pop_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/check_pop_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df.to.array.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df_to_array.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df_to_array.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/dot-nll.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/dot-nll.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-section serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":"details","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":"details","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/fdev.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/get_additional_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/get_additional_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph_loglik.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph_loglik.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/index.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ldpar.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ldpar.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/ldpar.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/llik.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/llik.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_curve_params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_curve_params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_noise_params.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_noise_params.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_pop_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_pop_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/log_likelihood.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/log_likelihood.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mk_baseline.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mk_baseline.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mkbaseline.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/mkbaseline.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   dplyr::filter(antigen_iso == \"HlyE_IgG\") %>%   serocalculator:::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/reexports.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/serocalculator.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/serocalculator.html","id":"details","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/serocalculator.html","id":"references","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/serocalculator.html","id":"author","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/stratify_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/stratify_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr315/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr315 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr323","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr323","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr323","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr323","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr323","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr323","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr323","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr323","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr323","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr323","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr323","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":null,"dir":"Preview > Pr323","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr323","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr323","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr323","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr323","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr323","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr323 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr323 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr323 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/index.html","id":null,"dir":"Preview > Pr323 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"overview","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"standard-error","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr323 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/serocalculator.html","id":"overview","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr323 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr323 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr323 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.431   0.000   0.431 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr323 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.148   0.024  17.257 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr323 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/authors.html","id":null,"dir":"Preview > Pr323","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/authors.html","id":"citation","dir":"Preview > Pr323","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2024). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9023, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2024},   note = {R package version 1.2.0.9023,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"serocalculator","dir":"Preview > Pr323","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"installing-r","dir":"Preview > Pr323","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr323","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"post-installation","dir":"Preview > Pr323","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"development-version","dir":"Preview > Pr323","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr323","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"during-devtools-installation","dir":"Preview > Pr323","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"independently","dir":"Preview > Pr323","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"getting-help","dir":"Preview > Pr323","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/index.html","id":"contributing-to-this-project","dir":"Preview > Pr323","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"new-features-development-version","dir":"Preview > Pr323 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr323 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-120","dir":"Preview > Pr323 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-110","dir":"Preview > Pr323 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-101","dir":"Preview > Pr323 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr323 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ab.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ab.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ab.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ab.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_curve_params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_curve_params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" %>%   readr::read_rds() %>%   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_noise_params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_noise_params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" %>%   readr::read_rds() %>%   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_pop_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_pop_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   readr::read_rds() %>%   as_pop_data()  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  %>% # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data %>% autoplot(strata = \"Country\", type = \"density\")  xs_data %>% autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curve,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_pop_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_pop_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_strata.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_strata.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_strata.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",     \"Count\")): could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df.to.array.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df_to_array.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df_to_array.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/dot-nll.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/dot-nll.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%  # Reduce dataset for the purposes of this example:   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":"details","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":"details","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/fdev.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/get_additional_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/get_additional_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph_loglik.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph_loglik.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/index.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ldpar.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ldpar.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/ldpar.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/llik.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/llik.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_curve_params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_curve_params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_noise_params.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_noise_params.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_pop_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_pop_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/log_likelihood.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/log_likelihood.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mk_baseline.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mk_baseline.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mkbaseline.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/mkbaseline.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   dplyr::filter(antigen_iso == \"HlyE_IgG\") %>%   serocalculator:::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/reexports.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/serocalculator.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/serocalculator.html","id":"details","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/serocalculator.html","id":"references","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/serocalculator.html","id":"author","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/stratify_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/stratify_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr323/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr323 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr327","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr327","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr327","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr327","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr327","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr327","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr327","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr327","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr327","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr327","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr327","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":null,"dir":"Preview > Pr327","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr327","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr327","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr327","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr327","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr327","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr327 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr327 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr327 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/index.html","id":null,"dir":"Preview > Pr327 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"overview","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) Error in get(paste0(generic, \".\", class), envir = get_method_env()) :   object 'type_sum.accel' not found library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) Error in get(paste0(generic, \".\", class), envir = get_method_env()) :   object 'type_sum.accel' not found library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"standard-error","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr327 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/serocalculator.html","id":"overview","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr327 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr327 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr327 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.424   0.000   0.423 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr327 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.151   0.020  16.910 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr327 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/authors.html","id":null,"dir":"Preview > Pr327","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/authors.html","id":"citation","dir":"Preview > Pr327","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9023, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.2.0.9023,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"serocalculator","dir":"Preview > Pr327","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"installing-r","dir":"Preview > Pr327","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr327","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"post-installation","dir":"Preview > Pr327","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"development-version","dir":"Preview > Pr327","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr327","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"during-devtools-installation","dir":"Preview > Pr327","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"independently","dir":"Preview > Pr327","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"getting-help","dir":"Preview > Pr327","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/index.html","id":"contributing-to-this-project","dir":"Preview > Pr327","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"new-features-development-version","dir":"Preview > Pr327 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr327 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-120","dir":"Preview > Pr327 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-110","dir":"Preview > Pr327 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-101","dir":"Preview > Pr327 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr327 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ab.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ab.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ab.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ab.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_curve_params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_curve_params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" %>%   readr::read_rds() %>%   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_noise_params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_noise_params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" %>%   readr::read_rds() %>%   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_pop_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_pop_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   readr::read_rds() %>%   as_pop_data()  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  %>% # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data %>% autoplot(strata = \"Country\", type = \"density\")  xs_data %>% autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curve,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_pop_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_pop_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_strata.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_strata.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_strata.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",     \"Count\")): could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df.to.array.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df_to_array.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df_to_array.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/dot-nll.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/dot-nll.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%  # Reduce dataset for the purposes of this example:   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":"details","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":"details","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/fdev.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/get_additional_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/get_additional_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph_loglik.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph_loglik.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/index.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ldpar.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ldpar.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/ldpar.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/llik.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/llik.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_curve_params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_curve_params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_noise_params.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_noise_params.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_pop_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_pop_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/log_likelihood.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/log_likelihood.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mk_baseline.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mk_baseline.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mkbaseline.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/mkbaseline.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   dplyr::filter(antigen_iso == \"HlyE_IgG\") %>%   serocalculator:::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/reexports.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/serocalculator.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/serocalculator.html","id":"details","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/serocalculator.html","id":"references","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/serocalculator.html","id":"author","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/stratify_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/stratify_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr327/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr327 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr335","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr335","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr335","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr335","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr335","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr335","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr335","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr335","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr335","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr335","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr335","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":null,"dir":"Preview > Pr335","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr335","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr335","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr335","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr335","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr335","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr335 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr335 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr335 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/index.html","id":null,"dir":"Preview > Pr335 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"overview","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"standard-error","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr335 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/serocalculator.html","id":"overview","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr335 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr335 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr335 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.425   0.001   0.425 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr335 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.148   0.030  16.985 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr335 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/authors.html","id":null,"dir":"Preview > Pr335","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/authors.html","id":"citation","dir":"Preview > Pr335","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9024, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.2.0.9024,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"serocalculator","dir":"Preview > Pr335","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"installing-r","dir":"Preview > Pr335","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr335","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"post-installation","dir":"Preview > Pr335","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"development-version","dir":"Preview > Pr335","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr335","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"during-devtools-installation","dir":"Preview > Pr335","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"independently","dir":"Preview > Pr335","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"getting-help","dir":"Preview > Pr335","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/index.html","id":"contributing-to-this-project","dir":"Preview > Pr335","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"new-features-development-version","dir":"Preview > Pr335 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr335 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-120","dir":"Preview > Pr335 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-110","dir":"Preview > Pr335 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-101","dir":"Preview > Pr335 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr335 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ab.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ab.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ab.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ab.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_curve_params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_curve_params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   \"https://osf.io/download/rtw5k/\" %>%   readr::read_rds() %>%   as_curve_params()  print(curve_data) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_noise_params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_noise_params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   \"https://osf.io/download//hqy4v/\" %>%   readr::read_rds() %>%   as_noise_params()  print(noise_data) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_pop_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_pop_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve = load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  %>% # Reduce dataset for this example   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(   file_path = \"https://osf.io/download//n6cp3/\",   age = \"Age\",   id = \"index_id\",   value = \"result\",   standardize = TRUE )  xs_data %>% autoplot(strata = \"Country\", type = \"density\")  xs_data %>% autoplot(strata = \"Country\", type = \"age-scatter\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curve,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_pop_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_pop_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(dplyr) xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data() check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_strata.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_strata.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_strata.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",     \"Count\")): could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df.to.array.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df_to_array.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df_to_array.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/dot-nll.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/dot-nll.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%  # Reduce dataset for the purposes of this example:   slice(1:100, .by = antigen_iso)  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   iterlim = 5 # limit iterations for the purpose of this example )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":"details","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 390.8284 383.8554 377.6242 372.0178 366.9449 362.3328 358.1226 354.2657 #>  [9] 350.7216 347.4560 344.4397 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":"details","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/fdev.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/getAdditionalData.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/getAdditionalData.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/get_additional_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/get_additional_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/get_additional_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/get_additional_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/get_additional_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"if (FALSE) { # \\dontrun{ plot1 <- graph.curve.params(curve_params)  print(plot1) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph_loglik.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph_loglik.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/index.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid get_additional_data() Get Additional Data graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ldpar.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ldpar.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/ldpar.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/llik.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/llik.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_curve_params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_curve_params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(\"https://osf.io/download/rtw5k/\")  print(curve) #> # A tibble: 20,000 × 7 #>    antigen_iso  iter     y0     y1    t1     alpha     r #>    <fct>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 19,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_noise_params.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_noise_params.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(\"https://osf.io/download//hqy4v/\") print(noise) #> # A tibble: 16 × 7 #>    antigen_iso Country    y.low   eps    nu  y.high Lab   #>    <chr>       <fct>      <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 HlyE_IgA    Bangladesh 0.376 0.280  2.60 5000000 CHRF  #>  2 HlyE_IgA    Ghana      0.179 0.240  2.60 5000000 MGH   #>  3 HlyE_IgA    Nepal      0.853 0.238  2.60 5000000 DH    #>  4 HlyE_IgA    Pakistan   0.508 0.279  2.60 5000000 AKU   #>  5 HlyE_IgG    Bangladesh 0.787 0.306  2.36 5000000 CHRF  #>  6 HlyE_IgG    Ghana      0.645 0.164  2.36 5000000 MGH   #>  7 HlyE_IgG    Nepal      1.89  0.128  2.36 5000000 DH    #>  8 HlyE_IgG    Pakistan   1.59  0.146  2.36 5000000 AKU   #>  9 LPS_IgA     Bangladesh 0.660 0.299  2.14 5000000 CHRF  #> 10 LPS_IgA     Ghana      0.861 0.163  2.14 5000000 MGH   #> 11 LPS_IgA     Nepal      1.79  0.115  2.14 5000000 DH    #> 12 LPS_IgA     Pakistan   5.13  0.246  2.14 5000000 AKU   #> 13 LPS_IgG     Bangladesh 0.992 0.298  3.24 5000000 CHRF  #> 14 LPS_IgG     Ghana      0.885 0.195  3.24 5000000 MGH   #> 15 LPS_IgG     Nepal      0.647 0.179  3.24 5000000 DH    #> 16 LPS_IgG     Pakistan   4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_pop_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_pop_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  print(xs_data) #> # A tibble: 3,336 × 8 #>    id    Country    cluster  catchment   age ageCat antigen_iso  value #>    <chr> <chr>      <fct>    <chr>     <dbl> <fct>  <fct>        <dbl> #>  1 B1    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgA     7.24  #>  2 B2    Bangladesh Ward 2 N dhaka       4   <5     HlyE_IgG    24.0   #>  3 B3    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgA     0.836 #>  4 B4    Bangladesh Ward 2 N dhaka       3.7 <5     HlyE_IgG     3.17  #>  5 B5    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgA     3.42  #>  6 B6    Bangladesh Ward 2 N dhaka      10.6 5-15   HlyE_IgG    14.3   #>  7 B7    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgA     8.84  #>  8 B8    Bangladesh Ward 2 N dhaka      16   16+    HlyE_IgG    14.2   #>  9 B9    Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgA    10.3   #> 10 B10   Bangladesh Ward 2 N dhaka      16.5 16+    HlyE_IgG    29.4   #> # ℹ 3,326 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/log_likelihood.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/log_likelihood.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # load in longitudinal parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  xs_data <- \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -9268.824"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mk_baseline.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mk_baseline.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mkbaseline.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/mkbaseline.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   dplyr::filter(antigen_iso == \"HlyE_IgG\") %>%   serocalculator:::plot_curve_params_one_ab()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/reexports.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator.html","id":"details","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator.html","id":"references","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator.html","id":"author","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_pop_data.csv\" serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k\")  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/stratify_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/stratify_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\") summary(xs_data, strata = \"Country\") #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 3 × 8 #>   Country        n   min first_quartile median  mean third_quartile   max #>   <chr>      <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 Bangladesh   802   0.6            4.9    9.2  9.43           14    18   #> 2 Nepal       1546   0.9            5.3   10.8 11.3            16.7  25   #> 3 Pakistan     988   0.8            4.9    9   10.1            14.8  24.3 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 6 × 8 #>   antigen_iso Country       Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    Bangladesh 0.0418     2.11    3.58      6.70 113.        0 #> 2 HlyE_IgG    Bangladesh 0.119      4.97    9.32     18.9  219.        0 #> 3 HlyE_IgA    Nepal      0          0.563   1.02      2.05  57.5       0 #> 4 HlyE_IgG    Nepal      0          0.897   1.62      3.37 184.        0 #> 5 HlyE_IgA    Pakistan   0          1.13    2.12      3.89 133.        0 #> 6 HlyE_IgG    Pakistan   0.192      1.04    2.40      5.15 135.        0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curve <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curve,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum   catchment     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>     <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 aku         294       0.1          0.118 0.00825  0.103  0.136 #> 2 Stratum 2 kgh         200       0.1          0.183 0.0139   0.157  0.212 #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord>  if (FALSE) { # \\dontrun{ # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  curves <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso) # Reduce dataset for the purposes of this example  noise <- load_noise_params(\"https://osf.io/download//hqy4v/\")  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_params = curves,   noise_params = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.142 0.00725  0.128  0.156     0.95  -2378.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr335/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr335 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr336","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr336","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr336","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr336","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr336","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr336","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr336","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr336","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr336","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr336","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr336","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":null,"dir":"Preview > Pr336","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr336","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr336","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr336","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr336","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr336","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr336 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr336 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr336 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/index.html","id":null,"dir":"Preview > Pr336 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"overview","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"standard-error","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr336 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/serocalculator.html","id":"overview","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr336 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr336 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr336 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.423   0.001   0.425 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr336 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.143   0.030  17.069 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr336 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/authors.html","id":null,"dir":"Preview > Pr336","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/authors.html","id":"citation","dir":"Preview > Pr336","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.2.0.9025, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.2.0.9025,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"serocalculator","dir":"Preview > Pr336","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"installing-r","dir":"Preview > Pr336","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr336","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"post-installation","dir":"Preview > Pr336","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"development-version","dir":"Preview > Pr336","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr336","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"during-devtools-installation","dir":"Preview > Pr336","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"independently","dir":"Preview > Pr336","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"getting-help","dir":"Preview > Pr336","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/index.html","id":"contributing-to-this-project","dir":"Preview > Pr336","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"new-features-development-version","dir":"Preview > Pr336 > News","previous_headings":"serocalculator (development version)","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr336 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-120","dir":"Preview > Pr336 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-110","dir":"Preview > Pr336 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-101","dir":"Preview > Pr336 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr336 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ab.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ab.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ab.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ab.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_curve_params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_curve_params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_noise_params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_noise_params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_pop_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_pop_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_pop_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_pop_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_strata.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_strata.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_strata.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df.to.array.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df_to_array.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df_to_array.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/dot-nll.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/dot-nll.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":"details","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":"details","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params = load_curve_params(\"https://osf.io/download/rtw5k\") xs_data <- \"https://osf.io/download//n6cp3/\" %>% load_pop_data()  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 390.8284 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/fdev.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph_loglik.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph_loglik.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/index.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ldpar.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ldpar.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/ldpar.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/llik.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/llik.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_curve_params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_curve_params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_noise_params.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_noise_params.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_pop_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_pop_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/log_likelihood.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/log_likelihood.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mk_baseline.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mk_baseline.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mkbaseline.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/mkbaseline.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/reexports.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator.html","id":"details","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator.html","id":"references","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator.html","id":"author","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/stratify_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/stratify_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr336/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr336 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr342","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr342","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr342","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr342","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr342","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr342","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr342","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr342","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr342","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr342","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr342","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":null,"dir":"Preview > Pr342","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr342","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr342","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr342","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr342","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr342","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr342 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr342 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr342 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/index.html","id":null,"dir":"Preview > Pr342 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"overview","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"standard-error","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr342 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/serocalculator.html","id":"overview","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr342 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr342 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr342 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.422   0.001   0.423 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr342 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.139   0.037  16.776 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr342 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/authors.html","id":null,"dir":"Preview > Pr342","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/authors.html","id":"citation","dir":"Preview > Pr342","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9001, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9001,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"serocalculator","dir":"Preview > Pr342","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"installing-r","dir":"Preview > Pr342","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr342","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"post-installation","dir":"Preview > Pr342","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"development-version","dir":"Preview > Pr342","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr342","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"during-devtools-installation","dir":"Preview > Pr342","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"independently","dir":"Preview > Pr342","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"getting-help","dir":"Preview > Pr342","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/index.html","id":"contributing-to-this-project","dir":"Preview > Pr342","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr342 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Added test internal function ab() (#342)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-130","dir":"Preview > Pr342 > News","previous_headings":"","what":"serocalculator 1.3.0","title":"Changelog","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"new-features-1-3-0","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.3.0","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"internal-changes-1-3-0","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.3.0","what":"Internal changes","title":"Changelog","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-120","dir":"Preview > Pr342 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-110","dir":"Preview > Pr342 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-101","dir":"Preview > Pr342 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr342 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ab.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ab.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ab.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab index row antibody baseline limits read blims blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ab.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ab.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- ab(t = t, par = par1, blims = blims) #> Error in ab(t = t, par = par1, blims = blims): could not find function \"ab\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_curve_params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_curve_params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_noise_params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_noise_params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_pop_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_pop_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/baseline.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/baseline.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/baseline.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab index row antibody baseline limits read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/baseline.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_pop_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_pop_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_strata.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_strata.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_strata.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df.to.array.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df_to_array.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df_to_array.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) #> Error: 'df_to_array' is not an exported object from 'namespace:serocalculator' ftable(arr[,,1:5]) #> Error: object 'arr' not found"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/dot-nll.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/dot-nll.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":"details","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":"details","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/fdev.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph_loglik.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph_loglik.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/index.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ldpar.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ldpar.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/ldpar.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/llik.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/llik.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_curve_params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_curve_params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_noise_params.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_noise_params.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_pop_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_pop_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/log_likelihood.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/log_likelihood.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mk_baseline.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mk_baseline.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mkbaseline.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mkbaseline.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mkbaseline.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/mkbaseline.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/reexports.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/row_longitudinal_parameter.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/row_longitudinal_parameter.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator.html","id":"details","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator.html","id":"references","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator.html","id":"author","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... additional arguments passed simcs.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/stratify_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/stratify_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr342/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr342 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr345","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr345","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr345","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr345","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr345","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr345","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr345","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr345","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr345","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr345","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr345","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":null,"dir":"Preview > Pr345","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr345","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr345","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr345","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr345","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr345","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr345 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr345 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr345 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/index.html","id":null,"dir":"Preview > Pr345 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"overview","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"standard-error","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr345 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/serocalculator.html","id":"overview","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr345 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr345 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr345 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.413   0.000   0.413 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr345 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.140   0.027  16.591 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr345 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/authors.html","id":null,"dir":"Preview > Pr345","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/authors.html","id":"citation","dir":"Preview > Pr345","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9003, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9003,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"serocalculator","dir":"Preview > Pr345","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"installing-r","dir":"Preview > Pr345","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr345","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"post-installation","dir":"Preview > Pr345","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"development-version","dir":"Preview > Pr345","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr345","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"during-devtools-installation","dir":"Preview > Pr345","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"independently","dir":"Preview > Pr345","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"getting-help","dir":"Preview > Pr345","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/index.html","id":"contributing-to-this-project","dir":"Preview > Pr345","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr345 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Added test sim.cs() (#344) Added test internal function ab() (#342) Reverted name change ldpar()-> row_longitudinal_parameter() (#343)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-130","dir":"Preview > Pr345 > News","previous_headings":"","what":"serocalculator 1.3.0","title":"Changelog","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"new-features-1-3-0","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.3.0","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"internal-changes-1-3-0","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.3.0","what":"Internal changes","title":"Changelog","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-120","dir":"Preview > Pr345 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-110","dir":"Preview > Pr345 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-101","dir":"Preview > Pr345 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr345 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ab.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ab.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ab.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab integer indicating row read blims blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ab.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ab.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- ab(t = t, par = par1, blims = blims) #> Error in ab(t = t, par = par1, blims = blims): could not find function \"ab\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_curve_params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_curve_params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_noise_params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_noise_params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_pop_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_pop_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/baseline.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/baseline.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/baseline.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab integer indicating row read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/baseline.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_pop_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_pop_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_strata.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_strata.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_strata.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df.to.array.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df_to_array.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df_to_array.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) #> Error: 'df_to_array' is not an exported object from 'namespace:serocalculator' ftable(arr[,,1:5]) #> Error: object 'arr' not found"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/dot-nll.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/dot-nll.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":"details","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":"details","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/fdev.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph_loglik.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph_loglik.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/index.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ldpar.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ldpar.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/ldpar.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/llik.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/llik.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_curve_params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_curve_params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_noise_params.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_noise_params.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_pop_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_pop_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/log_likelihood.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/log_likelihood.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/mk_baseline.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab integer indicating row read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/mk_baseline.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/reexports.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator.html","id":"details","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator.html","id":"references","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator.html","id":"author","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... additional arguments passed simcs.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed ldpar, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab integer indicating row read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/stratify_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/stratify_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr345/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr345 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"Preview > Pr346","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"our-standards","dir":"Preview > Pr346","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"Preview > Pr346","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"scope","dir":"Preview > Pr346","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"enforcement","dir":"Preview > Pr346","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"Preview > Pr346","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"Preview > Pr346","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"Preview > Pr346","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"Preview > Pr346","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"Preview > Pr346","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CODE_OF_CONDUCT.html","id":"attribution","dir":"Preview > Pr346","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":null,"dir":"Preview > Pr346","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":"fixing-typos","dir":"Preview > Pr346","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":"bigger-changes","dir":"Preview > Pr346","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":"pull-request-process","dir":"Preview > Pr346","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":"code-style","dir":"Preview > Pr346","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/CONTRIBUTING.html","id":"code-of-conduct","dir":"Preview > Pr346","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"introduction","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"load-packages","dir":"Preview > Pr346 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"load-data","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Preview > Pr346 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Preview > Pr346 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"conclusions","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/enteric_fever_example.html","id":"funding","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/index.html","id":null,"dir":"Preview > Pr346 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"overview","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"defining-incidence","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"modeling-assumptions","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"standard-error","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"antibody-response-curves","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"putting-it-all-together","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"composing-the-likelihood","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"model-for-active-infection-period","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"putting-it-all-together-1","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"biological-noise","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/methodology.html","id":"measurement-noise","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"introduction","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"methods","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Preview > Pr346 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"load-packages","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"load-data","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/scrubTyphus_example.html","id":"funding","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/serocalculator.html","id":"overview","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Preview > Pr346 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Preview > Pr346 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Preview > Pr346 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.423   0.000   0.423 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Preview > Pr346 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.145   0.030  16.933 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Preview > Pr346 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/authors.html","id":null,"dir":"Preview > Pr346","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/authors.html","id":"citation","dir":"Preview > Pr346","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9004, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9004,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"serocalculator","dir":"Preview > Pr346","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"installing-r","dir":"Preview > Pr346","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"installing-the-serocalculator-package","dir":"Preview > Pr346","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"post-installation","dir":"Preview > Pr346","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"development-version","dir":"Preview > Pr346","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"a-note-for-windows-users","dir":"Preview > Pr346","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"during-devtools-installation","dir":"Preview > Pr346","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"independently","dir":"Preview > Pr346","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"getting-help","dir":"Preview > Pr346","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/index.html","id":"contributing-to-this-project","dir":"Preview > Pr346","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"internal-changes-development-version","dir":"Preview > Pr346 > News","previous_headings":"serocalculator (development version)","what":"Internal changes","title":"Changelog","text":"Removed ldpar() API (#345) Added test sim.cs() (#344) Added test internal function ab() (#342) Reverted name change ldpar()-> row_longitudinal_parameter() (#343)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-130","dir":"Preview > Pr346 > News","previous_headings":"","what":"serocalculator 1.3.0","title":"Changelog","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"new-features-1-3-0","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.3.0","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"internal-changes-1-3-0","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.3.0","what":"Internal changes","title":"Changelog","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-120","dir":"Preview > Pr346 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-110","dir":"Preview > Pr346 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-101","dir":"Preview > Pr346 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-1","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-2","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-3","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-4","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-5","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/news/index.html","id":"serocalculator-1-0-1-6","dir":"Preview > Pr346 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ab.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ab.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ab.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab integer indicating row read blims blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ab.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ab.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- ab(t = t, par = par1, blims = blims) #> Error in ab(t = t, par = par1, blims = blims): could not find function \"ab\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_curve_params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_curve_params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_curve_params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_curve_params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_curve_params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_noise_params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_noise_params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_noise_params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_noise_params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_noise_params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_pop_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_pop_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_pop_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_pop_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/as_pop_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.pop_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.pop_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.pop_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/baseline.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/baseline.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/baseline.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab integer indicating row read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/baseline.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_pop_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_pop_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_pop_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_pop_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_pop_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_strata.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_strata.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_strata.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_strata.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/check_strata.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df.to.array.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df.to.array.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df_to_array.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df_to_array.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df_to_array.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df_to_array.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/df_to_array.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) #> Error: 'df_to_array' is not an exported object from 'namespace:serocalculator' ftable(arr[,,1:5]) #> Error: object 'arr' not found"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/dot-nll.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/dot-nll.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/dot-nll.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/dot-nll.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":"details","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/est.incidence.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/example_noise_params_pk.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/example_noise_params_pk.html","id":"source","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":"details","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":"details","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/f_dev0.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/fdev.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/fdev.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph.curve.params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph.curve.params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph.curve.params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph.curve.params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph.curve.params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph_loglik.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph_loglik.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph_loglik.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph_loglik.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/graph_loglik.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/index.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ldpar.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ldpar.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ldpar.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/ldpar.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/llik.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/llik.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_curve_params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_curve_params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_curve_params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_curve_params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_curve_params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_noise_params.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_noise_params.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_noise_params.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_noise_params.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_noise_params.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_pop_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_pop_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_pop_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_pop_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/load_pop_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/log_likelihood.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/log_likelihood.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/log_likelihood.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/log_likelihood.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/log_likelihood.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/mk_baseline.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/mk_baseline.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/mk_baseline.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab integer indicating row read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/mk_baseline.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.seroincidence.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.summary.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.summary.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/reexports.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100.html","id":"source","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator.html","id":"details","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator.html","id":"references","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator.html","id":"author","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":"details","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/serocalculator_example.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... additional arguments passed simcs.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.multi.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.multi.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.multi.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sim.cs.multi.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simcs.tinf.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simcs.tinf.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simcs.tinf.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simcs.tinf.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simresp.tinf.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simresp.tinf.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simresp.tinf.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed ldpar, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab integer indicating row read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/simresp.tinf.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/strata.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/stratify_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/stratify_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/stratify_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/stratify_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/stratify_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sub-.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/sub-.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.pop_data.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.pop_data.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.pop_data.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.pop_data.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.pop_data.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.by.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.by.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.by.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/summary.seroincidence.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/warn.missing.strata.html","id":null,"dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/warn.missing.strata.html","id":"ref-usage","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/warn.missing.strata.html","id":"arguments","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/warn.missing.strata.html","id":"value","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/preview/pr346/reference/warn.missing.strata.html","id":"ref-examples","dir":"Preview > Pr346 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/ab.html","id":null,"dir":"Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/ab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab integer indicating row read blims blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/ab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- serocalculator:::ab(t = t, par = par1, blims = blims)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_noise_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_noise_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_noise_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_noise_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_noise_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/as_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/reference/baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab integer indicating row read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams1.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter Delft Response Parameters Data for Model 1 — campylobacterDelftParams1","title":"Campylobacter Delft Response Parameters Data for Model 1 — campylobacterDelftParams1","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter Delft Response Parameters Data for Model 1 — campylobacterDelftParams1","text":"","code":"campylobacterDelftParams1"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter Delft Response Parameters Data for Model 1 — campylobacterDelftParams1","text":"list three dataframes: IgA dataframe containing 4000 rows 7 parameters IgA antibody. IgM dataframe containing 4000 rows 7 parameters IgM antibody. IgG dataframe containing 4000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter Delft Response Parameters Data for Model 1 — campylobacterDelftParams1","text":"","code":"# Show first rows of every dataframe contained in campylobacterDelftParams1 lapply(campylobacterDelftParams1, head) #> $IgA #>          y1       alpha yb r y0 mu1 t1 #> 1 0.9790816 0.005617736  0 1 NA  NA  0 #> 2 0.8561027 0.005686470  0 1 NA  NA  0 #> 3 0.8115014 0.005653234  0 1 NA  NA  0 #> 4 1.6246947 0.007071109  0 1 NA  NA  0 #> 5 1.6912089 0.007544257  0 1 NA  NA  0 #> 6 7.4984300 0.011753968  0 1 NA  NA  0 #>  #> $IgM #>          y1       alpha yb r y0 mu1 t1 #> 1 1.4153120 0.004264498  0 1 NA  NA  0 #> 2 0.6276850 0.002730359  0 1 NA  NA  0 #> 3 3.4163114 0.008804830  0 1 NA  NA  0 #> 4 1.8461903 0.005448317  0 1 NA  NA  0 #> 5 0.7790359 0.002590766  0 1 NA  NA  0 #> 6 0.3165559 0.001623372  0 1 NA  NA  0 #>  #> $IgG #>          y1       alpha yb r y0 mu1 t1 #> 1 12.012193 0.003507050  0 1 NA  NA  0 #> 2 11.361843 0.001877301  0 1 NA  NA  0 #> 3  6.644749 0.001918942  0 1 NA  NA  0 #> 4 12.757673 0.001004286  0 1 NA  NA  0 #> 5 10.514934 0.001570312  0 1 NA  NA  0 #> 6  8.421454 0.003307627  0 1 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams3.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter Delft Response Parameters Data for Model 3 — campylobacterDelftParams3","title":"Campylobacter Delft Response Parameters Data for Model 3 — campylobacterDelftParams3","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter Delft Response Parameters Data for Model 3 — campylobacterDelftParams3","text":"","code":"campylobacterDelftParams3"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter Delft Response Parameters Data for Model 3 — campylobacterDelftParams3","text":"list three dataframes: IgA dataframe containing 4000 rows 7 parameters IgA antibody. IgM dataframe containing 4000 rows 7 parameters IgM antibody. IgG dataframe containing 4000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter Delft Response Parameters Data for Model 3 — campylobacterDelftParams3","text":"","code":"# Show first rows of every dataframe contained in campylobacterDelftParams3 lapply(campylobacterDelftParams3, head) #> $IgA #>          y1       alpha yb r        y0        mu1        t1 #> 1 0.9790816 0.005617736  0 1 0.5968037 0.16152280 3.0647487 #> 2 0.8561027 0.005686470  0 1 0.6490095 0.14953802 1.8519904 #> 3 0.8115014 0.005653234  0 1 0.3162894 0.20908627 4.5064094 #> 4 1.6246947 0.007071109  0 1 0.7882382 0.29381913 2.4616328 #> 5 1.6912089 0.007544257  0 1 0.5962426 0.25043491 4.1629632 #> 6 7.4984300 0.011753968  0 1 7.3277274 0.06639833 0.3468196 #>  #> $IgM #>          y1       alpha yb r        y0       mu1        t1 #> 1 1.4153120 0.004264498  0 1 0.6213528 0.2079336  3.958986 #> 2 0.6276850 0.002730359  0 1 0.3697257 0.1366566  3.873045 #> 3 3.4163114 0.008804830  0 1 0.2768008 0.2385225 10.535773 #> 4 1.8461903 0.005448317  0 1 0.9193840 0.3195337  2.181853 #> 5 0.7790359 0.002590766  0 1 0.5470029 0.0860775  4.107961 #> 6 0.3165559 0.001623372  0 1 0.2296537 0.0809985  3.962139 #>  #> $IgG #>          y1       alpha yb r       y0       mu1       t1 #> 1 12.012193 0.003507050  0 1 1.140502 0.3664422 6.425171 #> 2 11.361843 0.001877301  0 1 1.578391 0.3105795 6.355391 #> 3  6.644749 0.001918942  0 1 1.138631 0.3945647 4.470751 #> 4 12.757673 0.001004286  0 1 2.809073 0.2565113 5.899462 #> 5 10.514934 0.001570312  0 1 1.277037 0.6905252 3.053117 #> 6  8.421454 0.003307627  0 1 1.181497 0.3235032 6.071037 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams4.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter Delft Response Parameters Data for Model 4 — campylobacterDelftParams4","title":"Campylobacter Delft Response Parameters Data for Model 4 — campylobacterDelftParams4","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter Delft Response Parameters Data for Model 4 — campylobacterDelftParams4","text":"","code":"campylobacterDelftParams4"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter Delft Response Parameters Data for Model 4 — campylobacterDelftParams4","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterDelftParams4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter Delft Response Parameters Data for Model 4 — campylobacterDelftParams4","text":"","code":"# Show first rows of every dataframe contained in campylobacterDelftParams4 lapply(campylobacterDelftParams4, head) #> $IgA #>          y1        alpha yb        r         y0       mu1        t1 #> 1 2.7471594 0.0235920904  0 2.773443 0.06452524 0.2737697 13.702269 #> 2 0.3361973 0.0001511561  0 1.006182 0.13241137 0.6774068  1.375517 #> 3 1.3402570 0.0072306458  0 1.640734 0.12395023 0.3883815  6.129892 #> 4 7.8335091 0.0028906244  0 2.768401 0.06512216 0.3482461 13.754356 #> 5 0.3069594 0.0029306951  0 1.050954 0.07870162 0.4218624  3.226293 #> 6 1.6315826 0.0044291436  0 1.740029 0.12264517 0.5924527  4.368299 #>  #> $IgM #>          y1        alpha yb        r         y0       mu1       t1 #> 1 3.0218848 0.0068170529  0 1.073372 0.09900034 0.3980767 8.587573 #> 2 1.4605254 0.0004345318  0 1.042603 0.07462244 0.4741715 6.272224 #> 3 2.1067968 0.0043837064  0 1.068606 0.10507351 0.4748134 6.314615 #> 4 1.1187181 0.0019154929  0 1.071340 0.09971466 0.3124635 7.737306 #> 5 0.4222472 0.0005651563  0 1.000181 0.12935880 0.5040532 2.346977 #> 6 4.5818356 0.0158849155  0 1.071558 0.10262796 0.6777377 5.605037 #>  #> $IgG #>          y1        alpha yb        r         y0       mu1       t1 #> 1 27.861427 0.0051607511  0 1.019014 0.07791154 0.7296875 8.057456 #> 2  3.306758 0.0011913102  0 1.099056 0.05077868 0.8435221 4.950963 #> 3 18.791581 0.0006869688  0 1.010531 0.09212040 0.6116469 8.694670 #> 4  5.866064 0.0006929407  0 1.019739 0.07694126 0.5232645 8.282421 #> 5 14.364930 0.0035222413  0 1.092096 0.05110497 0.9445758 5.969519 #> 6  5.790477 0.0003697673  0 1.010602 0.09127834 0.7696968 5.391807 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams1.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter SSI Response Parameters Data for Model 1 — campylobacterSSIParams1","title":"Campylobacter SSI Response Parameters Data for Model 1 — campylobacterSSIParams1","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter SSI Response Parameters Data for Model 1 — campylobacterSSIParams1","text":"","code":"campylobacterSSIParams1"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter SSI Response Parameters Data for Model 1 — campylobacterSSIParams1","text":"list three dataframes: IgA dataframe containing 4000 rows 7 parameters IgA antibody. IgM dataframe containing 4000 rows 7 parameters IgM antibody. IgG dataframe containing 4000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter SSI Response Parameters Data for Model 1 — campylobacterSSIParams1","text":"","code":"# Show first rows of every dataframe contained in campylobacterSSIParams1 lapply(campylobacterSSIParams1, head) #> $IgA #>          y1       alpha yb r y0 mu1 t1 #> 1 0.7003339 0.022609111  0 1 NA  NA  0 #> 2 0.4881885 0.021309170  0 1 NA  NA  0 #> 3 0.7607791 0.016486080  0 1 NA  NA  0 #> 4 1.5342800 0.014820666  0 1 NA  NA  0 #> 5 0.2454033 0.005397104  0 1 NA  NA  0 #> 6 0.9043005 0.017098452  0 1 NA  NA  0 #>  #> $IgM #>          y1        alpha yb r y0 mu1 t1 #> 1 0.8079065 0.0012365599  0 1 NA  NA  0 #> 2 0.4662612 0.0010868782  0 1 NA  NA  0 #> 3 0.9829273 0.0013366391  0 1 NA  NA  0 #> 4 0.1463502 0.0009022539  0 1 NA  NA  0 #> 5 0.1940006 0.0005063741  0 1 NA  NA  0 #> 6 0.7127425 0.0013184843  0 1 NA  NA  0 #>  #> $IgG #>          y1       alpha yb r y0 mu1 t1 #> 1 1.5841532 0.001312580  0 1 NA  NA  0 #> 2 1.8657514 0.001438733  0 1 NA  NA  0 #> 3 1.3126431 0.001351047  0 1 NA  NA  0 #> 4 1.1131536 0.001048270  0 1 NA  NA  0 #> 5 1.4794378 0.001274966  0 1 NA  NA  0 #> 6 0.9348555 0.001437053  0 1 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams2.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter SSI Response Parameters Data for Model 2 — campylobacterSSIParams2","title":"Campylobacter SSI Response Parameters Data for Model 2 — campylobacterSSIParams2","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter SSI Response Parameters Data for Model 2 — campylobacterSSIParams2","text":"","code":"campylobacterSSIParams2"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter SSI Response Parameters Data for Model 2 — campylobacterSSIParams2","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter SSI Response Parameters Data for Model 2 — campylobacterSSIParams2","text":"","code":"# Show first rows of every dataframe contained in campylobacterSSIParams2 lapply(campylobacterSSIParams2, head) #> $IgA #>          y1       alpha yb        r y0 mu1 t1 #> 1 0.3790329 0.013723334  0 1.180966 NA  NA  0 #> 2 1.2994481 0.005642420  0 1.212107 NA  NA  0 #> 3 9.4465428 0.011623566  0 1.205368 NA  NA  0 #> 4 1.0094504 0.027030054  0 1.114516 NA  NA  0 #> 5 0.7431767 0.004296025  0 1.210028 NA  NA  0 #> 6 0.5895802 0.005579473  0 1.219622 NA  NA  0 #>  #> $IgM #>          y1       alpha yb        r y0 mu1 t1 #> 1 2.0649209 0.011219203  0 1.163448 NA  NA  0 #> 2 0.5802861 0.001512339  0 1.140606 NA  NA  0 #> 3 1.0067090 0.016613231  0 1.197256 NA  NA  0 #> 4 0.6119739 0.013465649  0 1.144594 NA  NA  0 #> 5 0.6514105 0.002957626  0 1.142666 NA  NA  0 #> 6 0.3944259 0.021869072  0 1.136722 NA  NA  0 #>  #> $IgG #>          y1        alpha yb        r y0 mu1 t1 #> 1 1.3482386 0.0025760745  0 1.160319 NA  NA  0 #> 2 0.7507566 0.0009904948  0 1.163093 NA  NA  0 #> 3 1.5366781 0.0027693686  0 1.169187 NA  NA  0 #> 4 1.3857968 0.0060489554  0 1.142833 NA  NA  0 #> 5 1.1860646 0.0023857957  0 1.155256 NA  NA  0 #> 6 1.6407579 0.0053201985  0 1.148251 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams4.html","id":null,"dir":"Reference","previous_headings":"","what":"Campylobacter SSI Response Parameters Data for Model 4 — campylobacterSSIParams4","title":"Campylobacter SSI Response Parameters Data for Model 4 — campylobacterSSIParams4","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Campylobacter SSI Response Parameters Data for Model 4 — campylobacterSSIParams4","text":"","code":"campylobacterSSIParams4"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Campylobacter SSI Response Parameters Data for Model 4 — campylobacterSSIParams4","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSSIParams4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Campylobacter SSI Response Parameters Data for Model 4 — campylobacterSSIParams4","text":"","code":"# Show first rows of every dataframe contained in campylobacterSSIParams4 lapply(campylobacterSSIParams4, head) #> $IgA #>          y1       alpha yb        r        y0        mu1       t1 #> 1 0.3790329 0.013723334  0 1.180966 0.3084470 0.04388666 4.695573 #> 2 1.2994481 0.005642420  0 1.212107 0.8601382 0.12999444 3.173996 #> 3 9.4465428 0.011623566  0 1.205368 1.0658161 0.23740385 9.190702 #> 4 1.0094504 0.027030054  0 1.114516 0.9711994 0.03547790 1.088834 #> 5 0.7431767 0.004296025  0 1.210028 0.6803783 0.04747750 1.859510 #> 6 0.5895802 0.005579473  0 1.219622 0.4211322 0.13267245 2.536050 #>  #> $IgM #>          y1       alpha yb        r        y0        mu1        t1 #> 1 2.0649209 0.011219203  0 1.163448 1.3425809 0.09497971 4.5325273 #> 2 0.5802861 0.001512339  0 1.140606 0.4028595 0.10778318 3.3858110 #> 3 1.0067090 0.016613231  0 1.197256 0.8758258 0.15130671 0.9204797 #> 4 0.6119739 0.013465649  0 1.144594 0.4820747 0.07959144 2.9976911 #> 5 0.6514105 0.002957626  0 1.142666 0.6132294 0.02129935 2.8358109 #> 6 0.3944259 0.021869072  0 1.136722 0.3087485 0.04117147 5.9483978 #>  #> $IgG #>          y1        alpha yb        r        y0        mu1       t1 #> 1 1.3482386 0.0025760745  0 1.160319 0.7311131 0.09686797 6.317734 #> 2 0.7507566 0.0009904948  0 1.163093 0.5792900 0.05599269 4.630574 #> 3 1.5366781 0.0027693686  0 1.169187 0.4715269 0.30069910 3.928852 #> 4 1.3857968 0.0060489554  0 1.142833 0.8390058 0.20711698 2.422848 #> 5 1.1860646 0.0023857957  0 1.155256 0.9270293 0.06708116 3.673325 #> 6 1.6407579 0.0053201985  0 1.148251 1.2162005 0.12496860 2.396015 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSimLowData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Cross-sectional Data — campylobacterSimLowData","title":"Simulated Cross-sectional Data — campylobacterSimLowData","text":"Simulated cross-sectional population sample antibody levels data Campylobacter Pertussis lambda 0.036/yr (low), 0.021/yr (medium) 1.15/yr (high).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSimLowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Cross-sectional Data — campylobacterSimLowData","text":"","code":"campylobacterSimLowData"},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSimLowData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Cross-sectional Data — campylobacterSimLowData","text":"data frame 500 observations following 2 4 variables: Age  IgG  IgM  IgA","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/campylobacterSimLowData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated Cross-sectional Data — campylobacterSimLowData","text":"","code":"# Show first rows of the data head(campylobacterSimLowData) #>        Age          IgG          IgM          IgA #> 1 11871.16 5.532551e-02 2.131281e-03 7.027718e-02 #> 2  7869.00 9.195770e-02 1.303805e-01 1.502870e-01 #> 3   680.00 9.589740e-02 1.992161e-01 1.267946e-01 #> 4 23734.28 2.032342e-01 2.371293e-07 2.956911e-07 #> 5 16968.07 4.604123e-13 1.929238e-05 1.691724e-03 #> 6   769.00 1.311047e-01 1.070782e-01 1.442210e-01  # Summarize the data summary(campylobacterSimLowData) #>       Age             IgG               IgM                 IgA            #>  Min.   :   42   Min.   :0.00000   Min.   :0.0000000   Min.   :0.0000000   #>  1st Qu.: 6926   1st Qu.:0.02379   1st Qu.:0.0007472   1st Qu.:0.0005475   #>  Median :12577   Median :0.12649   Median :0.0445646   Median :0.0195426   #>  Mean   :13178   Mean   :0.22354   Mean   :0.0970820   Mean   :0.0672308   #>  3rd Qu.:19734   3rd Qu.:0.19127   3rd Qu.:0.1334760   3rd Qu.:0.1295172   #>  Max.   :27342   Max.   :2.59219   Max.   :2.1736800   Max.   :0.8397106"},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/check_strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/reference/clean_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","title":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","text":"Reformat cross-sectional antibody survey dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/clean_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","text":"","code":"clean_pop_data(pop_data)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/clean_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","text":"pop_data data.frame() containing following columns: index_id: character() variable identifying multiple rows data person antigen_isos: character() variable indicating antigen-isotype measured result: measured antibody concentration Age: age individual whose serum assayed, time blood sample collection.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/clean_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","text":"data.frame (tibble::tbl_df) containing following columns: id: character() variable identifying multiple rows data person antigen_isos: character() variable indicating antigen-isotype measured value: measured antibody concentration age: age individual whose serum assayed, time blood sample","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/clean_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat a cross-sectional antibody survey dataset — clean_pop_data","text":"","code":"xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")  clean_pop_data(xs_data)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/df.to.array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/df.to.array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/reference/df_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/df_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/reference/df_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/df_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/df_to_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log-likelihood (vectorized) — .nll_vec","title":"Calculate log-likelihood (vectorized) — .nll_vec","text":"Calculate log-likelihood (vectorized)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood (vectorized) — .nll_vec","text":"","code":".nll_vec(   log.lambda,   data,   antigen_isos,   curve_params,   noise_params,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood (vectorized) — .nll_vec","text":"log.lambda natural logarithm incidence parameter, log(years). Value -6 corresponds roughly 1 day (log(1/365.25)), -4 corresponds roughly 1 week (log(7 / 365.25)). data Data frame cross-sectional serology data per antibody age, additional columns antigen_isos Character vector one antibody names. Values must match data. curve_params List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type. noise_params list() (data.frame(), tibble()) containing noise parameters verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood (vectorized) — .nll_vec","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-nll_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate log-likelihood (vectorized) — .nll_vec","text":".nll(), except vectorized log.lambda argument.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-optNll.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — .optNll","title":"Find the maximum likelihood estimate of the incidence rate parameter — .optNll","text":"Find maximum likelihood estimate incidence rate parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-optNll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — .optNll","text":"","code":".optNll(   data = dataList$data,   curve_params = dataList$curve_params,   noise_params = dataList$noise_params,   dataList = NULL,   antigen_isos = unique(pull(data, \"antigen_iso\")),   lambda.start = 1/365.25,   stepmax = 1,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-optNll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — .optNll","text":"data Data frame cross-sectional serology data per antibody age, additional columns curve_params List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type. noise_params list() (data.frame(), tibble()) containing noise parameters dataList Optional argument; alternative passing data, curve_params, noise_params individually, may create list containing three elements (names) pass instead. option may useful parallel processing across strata. antigen_isos Character vector one antibody names. Values must match data lambda.start starting guess incidence rate, years/event. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. print.level argument determines level printing     done minimization process.  default     value 0 means printing occurs, value 1     means initial final details printed value     2 means full tracing information printed. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. steptol positive scalar providing minimum allowable     relative step length. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/dot-optNll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — .optNll","text":"stats::nlm() fit object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/est.incidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/estimateSeroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Seroincidence — estimateSeroincidence","title":"Estimate Seroincidence — estimateSeroincidence","text":"Function estimate seroincidences based cross-section serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/estimateSeroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — estimateSeroincidence","text":"","code":"estimateSeroincidence(   data,   antibodies,   strata = \"\",   params,   censorLimits,   par0,   start = -6,   numCores = 1L )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/estimateSeroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — estimateSeroincidence","text":"data Data frame cross-sectional serology data per antibody age, additional columns identify possible strata. antibodies Character vector one antibody names. Values must match data. strata Character vector strata. Values must match data. Default = \"\". params List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type. censorLimits List cutoffs one named antibody types (corresponding data). par0 List parameters (lognormal) distribution antibody concentrations true seronegatives (.e. never seroconverted), named antibody type (corresponding data). start starting value log(lambda). Value -6 corresponds roughly 1 day (log(1/365.25)), -4 corresponds roughly 1 week (log(7 / 365.25)). Default = -6. numCores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/estimateSeroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — estimateSeroincidence","text":"set lambda estimates strata.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/estimateSeroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — estimateSeroincidence","text":"","code":"if (FALSE) { estimateSeroincidence(data = csData,                       antibodies = c(\"IgG\", \"IgM\", \"IgA\"),                       strata = \"\",                       params = campylobacterDelftParams4,                       censorLimits = cutOffs,                       par0 = baseLn,                       start = -4)  estimateSeroincidence(data = csData,                       antibodies = c(\"IgG\", \"IgM\", \"IgA\"),                       strata = \"\",                       params = campylobacterDelftParams4,                       censorLimits = cutOffs,                       par0 = baseLn,                       start = -4,                       numCores = parallel::detectCores()) }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/example_noise_params_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/example_noise_params_pk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/f_dev0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/fdev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/fdev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/getAdditionalData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Additional Data — getAdditionalData","title":"Get Additional Data — getAdditionalData","text":"getAdditionalData() renamed get_additional_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/getAdditionalData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — getAdditionalData","text":"","code":"getAdditionalData(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/get_additional_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Additional Data — get_additional_data","title":"Get Additional Data — get_additional_data","text":"Retrieves additional data internet. data format must .RDS zipped .RDS. purpose function download data longitudinal response parameters online repository cross-sectional population data. Data package available : https://osf.io/ne8pc/files/osfstorage can save data chosen directory using optional savePath argument. Specify file path file name. Large datasets may timeout. , can increase download time updating maximum timeout time code . (Ex: increase 300 1000) options(timeout = max(300, getOption(\"timeout\")))","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/get_additional_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Additional Data — get_additional_data","text":"","code":"get_additional_data(fileURL, savePath = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/get_additional_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Additional Data — get_additional_data","text":"fileURL URL file downloaded. savePath Folder directory filename save downloaded unzipped (needed) file. File saved argument NULL. Optional. Default = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/get_additional_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Additional Data — get_additional_data","text":"R object stored file indicated fileURL input Data object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/get_additional_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Additional Data — get_additional_data","text":"","code":"if (FALSE) { # \\dontrun{ curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\"   )  # optionally, save the data to disk curve_param_samples <-   get_additional_data(     fileURL = \"https://osf.io/download/bhfvx\",     savePath = \"~/Downloads/curv_params.rds\"   ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.curve.params.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.curve.params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.curve.params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.curve.params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.curve.params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.by.html","id":null,"dir":"Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","title":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","text":"","code":"graph.decay.curves.by(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","text":"curve_params data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can used subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed graph.decay.curves verbose verbose output xlim range x values graph n_curves many curves plot (see details). rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque (transparency) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.by.html","id":"rows-to-graph","dir":"Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — graph.decay.curves.by","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call graph.decay.curves() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph an antibody decay curve model — graph.decay.curves","title":"Graph an antibody decay curve model — graph.decay.curves","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — graph.decay.curves","text":"","code":"graph.decay.curves(   curve_params,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   log_x = FALSE,   rows_to_graph = sample.int(n = nrow(curve_params), size = min(n_curves,     nrow(curve_params)), replace = FALSE),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — graph.decay.curves","text":"curve_params data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque (transparency) n_curves many curves plot (see details). log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — graph.decay.curves","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":"n-curves-and-rows-to-graph","dir":"Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — graph.decay.curves","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function randomly select (without replacement) subset n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.decay.curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — graph.decay.curves","text":"","code":"if (FALSE) { curve_params = readRDS(url(\"https://osf.io/download/rtw5k/\")) plot1 = graph.curve.params(curve_params) print(plot1) }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph log-likelihood of data — graph.loglik","title":"Graph log-likelihood of data — graph.loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph.loglik","text":"","code":"graph.loglik(   pop_data,   curve_params,   noise_params,   antigen_isos,   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph.loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph.loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph.loglik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph.loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <- load_pop_data(\"https://osf.io/download//n6cp3/\")   # Load curve parameters and subset for the purposes of this example dmcmc <- load_curve_params(\"https://osf.io/download/rtw5k/\") %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   slice(1:100, .by = antigen_iso)  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- graph.loglik(   pop_data = xs_data,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgA"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph_loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph_loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph_loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph_loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/graph_loglik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":"https://ucd-serg.github.io/serocalculator/reference/ldpar.html","id":null,"dir":"Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/ldpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/ldpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/ldpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/llik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/llik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_noise_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_noise_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_noise_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_noise_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_noise_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/load_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/reference/log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/reference/mk_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/mk_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/mk_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab integer indicating row read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/mk_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/mkbaseline.html","id":null,"dir":"Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/mkbaseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/mkbaseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/mkbaseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams1.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertussis IgG-PT Response Parameters Data for Model 1 — pertussisIgGPTParams1","title":"Pertussis IgG-PT Response Parameters Data for Model 1 — pertussisIgGPTParams1","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertussis IgG-PT Response Parameters Data for Model 1 — pertussisIgGPTParams1","text":"","code":"pertussisIgGPTParams1"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pertussis IgG-PT Response Parameters Data for Model 1 — pertussisIgGPTParams1","text":"dataframe IgG containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pertussis IgG-PT Response Parameters Data for Model 1 — pertussisIgGPTParams1","text":"","code":"# Show first rows of every dataframe contained in pertussisIgGPTParams1 lapply(pertussisIgGPTParams1, head) #> $IgG #>           y1        alpha yb r y0 mu1 t1 #> 1  309.95227 0.0013582931  0 1 NA  NA  0 #> 2  351.07244 0.0014761587  0 1 NA  NA  0 #> 3   61.72439 0.0003486033  0 1 NA  NA  0 #> 4 1103.35501 0.0023628598  0 1 NA  NA  0 #> 5 1402.26889 0.0040798615  0 1 NA  NA  0 #> 6  812.85619 0.0012771807  0 1 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams2.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertussis IgG-PT Response Parameters Data for Model 2 — pertussisIgGPTParams2","title":"Pertussis IgG-PT Response Parameters Data for Model 2 — pertussisIgGPTParams2","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertussis IgG-PT Response Parameters Data for Model 2 — pertussisIgGPTParams2","text":"","code":"pertussisIgGPTParams2"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pertussis IgG-PT Response Parameters Data for Model 2 — pertussisIgGPTParams2","text":"dataframe IgG containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pertussis IgG-PT Response Parameters Data for Model 2 — pertussisIgGPTParams2","text":"","code":"# Show first rows of every dataframe contained in pertussisIgGPTParams2 lapply(pertussisIgGPTParams2, head) #> $IgG #>            y1        alpha yb        r y0 mu1 t1 #> 1   9338.5182 3.908447e-06  0 1.984440 NA  NA  0 #> 2    608.0304 1.322816e-05  0 2.380790 NA  NA  0 #> 3    926.2819 2.797526e-06  0 2.291821 NA  NA  0 #> 4   5023.5881 2.141244e-05  0 1.897520 NA  NA  0 #> 5   6357.7694 7.986787e-06  0 1.869652 NA  NA  0 #> 6 656075.6374 1.876985e-06  0 2.326428 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams3.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertussis IgG-PT Response Parameters Data for Model 3 — pertussisIgGPTParams3","title":"Pertussis IgG-PT Response Parameters Data for Model 3 — pertussisIgGPTParams3","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertussis IgG-PT Response Parameters Data for Model 3 — pertussisIgGPTParams3","text":"","code":"pertussisIgGPTParams3"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pertussis IgG-PT Response Parameters Data for Model 3 — pertussisIgGPTParams3","text":"dataframe IgG containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pertussis IgG-PT Response Parameters Data for Model 3 — pertussisIgGPTParams3","text":"","code":"# Show first rows of every dataframe contained in pertussisIgGPTParams3 lapply(pertussisIgGPTParams3, head) #> $IgG #>           y1        alpha yb r        y0       mu1        t1 #> 1  309.95227 0.0013582931  0 1 0.8858853 0.6482737  9.035669 #> 2  351.07244 0.0014761587  0 1 0.4461476 0.1958226 34.051720 #> 3   61.72439 0.0003486033  0 1 0.7276450 0.2298031 19.323595 #> 4 1103.35501 0.0023628598  0 1 0.4962986 0.1398534 55.105486 #> 5 1402.26889 0.0040798615  0 1 0.5894248 0.6389777 12.167020 #> 6  812.85619 0.0012771807  0 1 1.0949915 1.0617529  6.225373 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams4.html","id":null,"dir":"Reference","previous_headings":"","what":"Pertussis IgG-PT Response Parameters Data for Model 4 — pertussisIgGPTParams4","title":"Pertussis IgG-PT Response Parameters Data for Model 4 — pertussisIgGPTParams4","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pertussis IgG-PT Response Parameters Data for Model 4 — pertussisIgGPTParams4","text":"","code":"pertussisIgGPTParams4"},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pertussis IgG-PT Response Parameters Data for Model 4 — pertussisIgGPTParams4","text":"dataframe IgG containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/pertussisIgGPTParams4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pertussis IgG-PT Response Parameters Data for Model 4 — pertussisIgGPTParams4","text":"","code":"# Show first rows of every dataframe contained in pertussisIgGPTParams4 lapply(pertussisIgGPTParams4, head) #> $IgG #>            y1        alpha yb        r        y0       mu1        t1 #> 1   9338.5182 3.908447e-06  0 1.984440 0.3679380 0.3642614 27.841941 #> 2    608.0304 1.322816e-05  0 2.380790 0.4518361 0.2308821 31.204939 #> 3    926.2819 2.797526e-06  0 2.291821 0.4148741 1.0713510  7.197416 #> 4   5023.5881 2.141244e-05  0 1.897520 0.3258315 0.2198684 43.859306 #> 5   6357.7694 7.986787e-06  0 1.869652 0.6074594 0.3787113 24.440524 #> 6 656075.6374 1.876985e-06  0 2.326428 0.2303021 0.4318404 34.416405 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — plot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — plot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — plot.seroincidence.by","text":"","code":"# S3 method for seroincidence.by plot(x, ncol = min(3, length(x)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — plot.seroincidence.by","text":"x '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed plot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — plot.seroincidence.by","text":"aan object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — plot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — plot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — plot.seroincidence","text":"","code":"# S3 method for seroincidence plot(x, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — plot.seroincidence","text":"x seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — plot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — plot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — plot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — plot.summary.seroincidence.by","text":"","code":"# S3 method for summary.seroincidence.by plot(x, xvar, alpha = 0.7, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — plot.summary.seroincidence.by","text":"x summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot.summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — plot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/postprocess_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"postprocess a fitted incidence model — postprocess_fit","title":"postprocess a fitted incidence model — postprocess_fit","text":"postprocess fitted incidence model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/postprocess_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"postprocess a fitted incidence model — postprocess_fit","text":"","code":"postprocess_fit(fit, coverage = 0.95, start = attr(fit, \"lambda.start\"))"},{"path":"https://ucd-serg.github.io/serocalculator/reference/postprocess_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"postprocess a fitted incidence model — postprocess_fit","text":"fit output stats::nlm() coverage desired confidence interval coverage probability start starting value incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/postprocess_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"postprocess a fitted incidence model — postprocess_fit","text":"tibble::tibble(); see stats::nlm() details code variable","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.ests.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Seroincidence Object — print.seroincidence.ests","title":"Print Method for Seroincidence Object — print.seroincidence.ests","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.ests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Object — print.seroincidence.ests","text":"","code":"# S3 method for seroincidence.ests print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.ests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Object — print.seroincidence.ests","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.ests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Object — print.seroincidence.ests","text":"","code":"if (FALSE) { # estimate seroincidence seroincidence <- est.incidence.by(...)  # print the seroincidence object to the console print(seroincidence)  # or simply type (appropriate print method will be invoked automatically) seroincidence }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.ests.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.ests","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.ests","text":"Custom print() function \"summary.seroincidence.ests\" objects (constructed summary.seroincidence.ests())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.ests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.ests","text":"","code":"# S3 method for summary.seroincidence.ests print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.ests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.ests","text":"x \"summary.seroincidence.ests\" object (constructed summary.seroincidence.ests()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.ests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.ests","text":"","code":"if (FALSE) { # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # print the summary of seroincidence object to the console print(seroincidenceSummary)  # or simply type (appropriate print method will be invoked automatically) seroincidenceSummary }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence","text":"Custom print() function show output seroincidence summary summary.seroincidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence","text":"","code":"# S3 method for summary.seroincidence print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence","text":"x list containing output function summary.seroincidence(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/print.summary.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence","text":"","code":"if (FALSE) { # estimate seroincidence seroincidence <- estimateSeroincidence(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # print the summary of seroincidence object to the console print(seroincidenceSummary)  # or simply type (appropriate print method will be invoked automatically) seroincidenceSummary }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/row_longitudinal_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/row_longitudinal_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/row_longitudinal_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams1.html","id":null,"dir":"Reference","previous_headings":"","what":"Salmonella SSI Response Parameters Data for Model 1 — salmonellaSSIParams1","title":"Salmonella SSI Response Parameters Data for Model 1 — salmonellaSSIParams1","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salmonella SSI Response Parameters Data for Model 1 — salmonellaSSIParams1","text":"","code":"salmonellaSSIParams1"},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salmonella SSI Response Parameters Data for Model 1 — salmonellaSSIParams1","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Salmonella SSI Response Parameters Data for Model 1 — salmonellaSSIParams1","text":"","code":"# Show first rows of every dataframe contained in salmonellaSSIParams1 lapply(salmonellaSSIParams1, head) #> $IgA #>          y1       alpha yb r y0 mu1 t1 #> 1 0.8846559 0.008526753  0 1 NA  NA  0 #> 2 1.0830794 0.012876120  0 1 NA  NA  0 #> 3 0.8741444 0.008709623  0 1 NA  NA  0 #> 4 1.5351236 0.003502516  0 1 NA  NA  0 #> 5 0.3268195 0.002556930  0 1 NA  NA  0 #> 6 0.1963830 0.020255418  0 1 NA  NA  0 #>  #> $IgM #>            y1        alpha yb r y0 mu1 t1 #> 1 2.223399974 0.0707174863  0 1 NA  NA  0 #> 2 3.496295237 0.0028553885  0 1 NA  NA  0 #> 3 0.749391784 0.0008170739  0 1 NA  NA  0 #> 4 0.624004098 0.0027294130  0 1 NA  NA  0 #> 5 0.008570974 0.0020008248  0 1 NA  NA  0 #> 6 1.241508561 0.0009053516  0 1 NA  NA  0 #>  #> $IgG #>          y1        alpha yb r y0 mu1 t1 #> 1 0.6078662 4.586619e-02  0 1 NA  NA  0 #> 2 0.8793232 2.602733e-02  0 1 NA  NA  0 #> 3 0.2713987 7.542284e-04  0 1 NA  NA  0 #> 4 2.1483480 5.438996e+02  0 1 NA  NA  0 #> 5 0.1096123 3.154008e-03  0 1 NA  NA  0 #> 6 1.1052943 1.190809e-02  0 1 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams2.html","id":null,"dir":"Reference","previous_headings":"","what":"Salmonella SSI Response Parameters Data for Model 2 — salmonellaSSIParams2","title":"Salmonella SSI Response Parameters Data for Model 2 — salmonellaSSIParams2","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salmonella SSI Response Parameters Data for Model 2 — salmonellaSSIParams2","text":"","code":"salmonellaSSIParams2"},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salmonella SSI Response Parameters Data for Model 2 — salmonellaSSIParams2","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Salmonella SSI Response Parameters Data for Model 2 — salmonellaSSIParams2","text":"","code":"# Show first rows of every dataframe contained in salmonellaSSIParams2 lapply(salmonellaSSIParams2, head) #> $IgA #>          y1       alpha yb        r y0 mu1 t1 #> 1 0.1645894 0.008301086  0 1.020289 NA  NA  0 #> 2 0.4967038 0.007181714  0 1.021778 NA  NA  0 #> 3 2.5087166 0.001178859  0 1.017500 NA  NA  0 #> 4 1.8760033 0.018867951  0 1.020985 NA  NA  0 #> 5 0.2381400 0.003545378  0 1.018420 NA  NA  0 #> 6 0.1075755 0.001709320  0 1.017080 NA  NA  0 #>  #> $IgM #>          y1        alpha yb        r y0 mu1 t1 #> 1 0.6325777 0.0028957411  0 1.047555 NA  NA  0 #> 2 1.4144767 0.0328629331  0 1.039616 NA  NA  0 #> 3 1.2642730 0.0008913089  0 1.051353 NA  NA  0 #> 4 1.0383240 0.0024629578  0 1.056098 NA  NA  0 #> 5 1.9768815 0.0031380379  0 1.052206 NA  NA  0 #> 6 1.0602443 0.0140293204  0 1.049931 NA  NA  0 #>  #> $IgG #>          y1       alpha yb        r y0 mu1 t1 #> 1 0.5630924 0.003808514  0 1.017216 NA  NA  0 #> 2 0.9084731 0.004009900  0 1.021487 NA  NA  0 #> 3 1.3531416 0.001163992  0 1.013681 NA  NA  0 #> 4 0.7098593 0.004429380  0 1.021024 NA  NA  0 #> 5 0.9199583 0.002791685  0 1.020375 NA  NA  0 #> 6 8.4187094 0.003258891  0 1.017908 NA  NA  0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams4.html","id":null,"dir":"Reference","previous_headings":"","what":"Salmonella SSI Response Parameters Data for Model 4 — salmonellaSSIParams4","title":"Salmonella SSI Response Parameters Data for Model 4 — salmonellaSSIParams4","text":"List data frames longitudinal parameters. data frame contains Monte Carlo samples antibody type.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salmonella SSI Response Parameters Data for Model 4 — salmonellaSSIParams4","text":"","code":"salmonellaSSIParams4"},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salmonella SSI Response Parameters Data for Model 4 — salmonellaSSIParams4","text":"list three dataframes: IgA dataframe containing 3000 rows 7 parameters IgA antibody. IgM dataframe containing 3000 rows 7 parameters IgM antibody. IgG dataframe containing 3000 rows 7 parameters IgG antibody.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/salmonellaSSIParams4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Salmonella SSI Response Parameters Data for Model 4 — salmonellaSSIParams4","text":"","code":"# Show first rows of every dataframe contained in salmonellaSSIParams4 lapply(salmonellaSSIParams4, head) #> $IgA #>          y1       alpha yb        r         y0        mu1        t1 #> 1 0.1645894 0.008301086  0 1.020289 0.11973340 0.12222920 2.6031943 #> 2 0.4967038 0.007181714  0 1.021778 0.39052803 0.14802164 1.6247227 #> 3 2.5087166 0.001178859  0 1.017500 2.37886174 0.17727577 0.2998108 #> 4 1.8760033 0.018867951  0 1.020985 1.81306536 0.15521542 0.2198533 #> 5 0.2381400 0.003545378  0 1.018420 0.21870973 0.11699959 0.7274678 #> 6 0.1075755 0.001709320  0 1.017080 0.09313794 0.08910887 1.6172527 #>  #> $IgM #>          y1        alpha yb        r        y0        mu1        t1 #> 1 0.6325777 0.0028957411  0 1.047555 0.5102927 0.07773161 2.7635934 #> 2 1.4144767 0.0328629331  0 1.039616 0.5753705 0.20969035 4.2896625 #> 3 1.2642730 0.0008913089  0 1.051353 1.1804183 0.07957789 0.8624049 #> 4 1.0383240 0.0024629578  0 1.056098 1.0077723 0.03253768 0.9178773 #> 5 1.9768815 0.0031380379  0 1.052206 1.2086867 0.11864577 4.1466813 #> 6 1.0602443 0.0140293204  0 1.049931 0.8761034 0.05988377 3.1856792 #>  #> $IgG #>          y1       alpha yb        r        y0        mu1        t1 #> 1 0.5630924 0.003808514  0 1.017216 0.5040835 0.11686141 0.9472916 #> 2 0.9084731 0.004009900  0 1.021487 0.7985884 0.25997719 0.4958881 #> 3 1.3531416 0.001163992  0 1.013681 0.7592344 0.17166853 3.3662183 #> 4 0.7098593 0.004429380  0 1.021024 0.6843716 0.06179318 0.5917449 #> 5 0.9199583 0.002791685  0 1.020375 0.8494778 0.16093737 0.4952642 #> 6 8.4187094 0.003258891  0 1.017908 3.5463722 1.59327615 0.5426124 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/serocalculator_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim.cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"sim.cs() renamed sim_pop_data() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim.cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim.cs.multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"sim.cs.multi() renamed sim_pop_data_multi() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim.cs.multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"","code":"sim_pop_data(   lambda = 0.1,   n_samples = 100,   age_range = c(0, 20),   age_fixed = NA,   antigen_isos = intersect(get_biomarker_levels(curve_params), rownames(noise_limits)),   n_mcmc_samples = 0,   renew_params = FALSE,   add_noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n_samples number samples simulate age_range age range sampled individuals, years age_fixed specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n_mcmc_samples many MCMC samples use: n_mcmc_samples 1:4000 fixed posterior sample used n_mcmc_samples = 0, random sample chosen renew_params whether generate new parameter set infection renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 add_noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"","code":"# Load curve parameters dmcmc <- typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2 # Range covered in simulations lifespan <- c(0, 10) # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim_pop_data(   curve_params = dmcmc,   lambda = lambda,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = TRUE,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple data sets — sim_pop_data_multi","title":"Simulate multiple data sets — sim_pop_data_multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim_pop_data_multi","text":"","code":"sim_pop_data_multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim_pop_data_multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() verbose whether report verbose information ... Arguments passed sim_pop_data lambda numeric() scalar indicating incidence rate (events per person-years) n_samples number samples simulate age_range age range sampled individuals, years age_fixed specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n_mcmc_samples many MCMC samples use: n_mcmc_samples 1:4000 fixed posterior sample used n_mcmc_samples = 0, random sample chosen renew_params whether generate new parameter set infection renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 add_noise logical() indicating whether add biological measurement noise noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim_pop_data_multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sim_pop_data_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multiple data sets — sim_pop_data_multi","text":"","code":"# Load curve parameters dmcmc <- typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambdas = c(.05, .1, .15, .2, .3)  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  sim_pop_data_multi(   curve_params = dmcmc,   lambdas = lambdas,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = TRUE,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\",   nclus = 10) #> # A tibble: 10,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.757       0.05       1 #>  2  3.53 1     HlyE_IgG    0.520       0.05       1 #>  3  2.27 2     HlyE_IgA    0.819       0.05       1 #>  4  2.27 2     HlyE_IgG    0.707       0.05       1 #>  5  9.05 3     HlyE_IgA    0.150       0.05       1 #>  6  9.05 3     HlyE_IgG    0.506       0.05       1 #>  7  5.94 4     HlyE_IgA    0.837       0.05       1 #>  8  5.94 4     HlyE_IgG    0.870       0.05       1 #>  9  9.88 5     HlyE_IgA    0.297       0.05       1 #> 10  9.88 5     HlyE_IgG    0.272       0.05       1 #> # ℹ 9,990 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/reference/simcs.tinf.html","id":null,"dir":"Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"collect cross-sectional data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/simcs.tinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n_samples,   age_range,   age_fixed = NA,   antigen_isos,   n_mcmc_samples = 0,   renew_params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/simcs.tinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n_samples number samples n_samples (= nr simulated records) age_range age range use simulating data, days age_fixed age_fixed parameter sample (age_fixed = NA age infection) antigen_isos character vector one antibody names. Values must match curve_params. n_mcmc_samples n_mcmc_samples 1:4000, fixed posterior sample used n_mcmc_samples = 0 random sample chosen renew_params renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 ... Arguments passed simresp.tinf predpar array() dimensions named: antigen_iso parameter obs","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/simcs.tinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array() dimensions n_samples, length(antigen_isos) + 1, rows observations columns age biomarkers y(t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/simresp.tinf.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/simresp.tinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t_end,   age_fixed,   antigen_isos,   n_mcmc_samples = 0,   renew_params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/simresp.tinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t_end end time interval (beginning time 0) days(?) age_fixed parameter estimates fixed age (age_fixed years) . age_fixed = NA age infection used. antigen_isos antigen isotypes n_mcmc_samples posterior sample may selected (1:4000), n_mcmc_samples = 0 posterior sample chosen random. renew_params infection, new parameter sample may generated (renew_params = TRUE). Otherwise (renew_params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed ldpar, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab integer indicating row read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/simresp.tinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"list : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/strata.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/stratify_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/stratify_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/stratify_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/stratify_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/stratify_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sub-.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/sub-.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.ests.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.ests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for seroincidence.ests summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.ests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.ests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"list following items: Results dplyr::tibble() columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.exit.code (included showConvergence = TRUE) Convergence information returned stats::nlm() Antibodies Character vector names input antibodies used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.ests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"if (FALSE) { # estimate seroincidence seroincidence <- est.incidence.by(...)  # calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence) }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/summary.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Example cross-sectional data for typhoid (HlyE_IgA and HlyE_IgG) — typhoid_controls","title":"Example cross-sectional data for typhoid (HlyE_IgA and HlyE_IgG) — typhoid_controls","text":"Data frame ELISA assay results, pop (\"CA Facts\", \"MGH\"), antigen_iso (\"HlyE_IgA\", \"HlyE_IgG\"), Age (years).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example cross-sectional data for typhoid (HlyE_IgA and HlyE_IgG) — typhoid_controls","text":"","code":"typhoid_controls"},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_controls.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example cross-sectional data for typhoid (HlyE_IgA and HlyE_IgG) — typhoid_controls","text":"measurements variable elisa. Variable nu provides estimate conditional noise parameter.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_controls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example cross-sectional data for typhoid (HlyE_IgA and HlyE_IgG) — typhoid_controls","text":"","code":"# Print the data: typhoid_controls #> # A tibble: 272 × 5 #>    antigen_iso  elisa   Age pop         nu #>    <chr>        <dbl> <dbl> <chr>    <dbl> #>  1 HlyE_IgG    0.504     19 CA Facts  3.42 #>  2 HlyE_IgG    0.897     19 CA Facts  3.42 #>  3 HlyE_IgG    0.151     12 CA Facts  3.42 #>  4 HlyE_IgG    0.728     21 CA Facts  3.42 #>  5 HlyE_IgG    1.10      24 CA Facts  3.42 #>  6 HlyE_IgG    1.69      23 CA Facts  3.42 #>  7 HlyE_IgG    1.53      12 CA Facts  3.42 #>  8 HlyE_IgG    2.18      21 CA Facts  3.42 #>  9 HlyE_IgG    0.435      3 CA Facts  3.42 #> 10 HlyE_IgG    0.0730     5 CA Facts  3.42 #> # ℹ 262 more rows  # Plot the data library(ggplot2) typhoid_controls |>   ggplot(aes(x = Age, y = elisa, col = antigen_iso)) +   geom_point() +   geom_smooth() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_noise_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Example noise parameters for HlyE_IgA and HlyE_IgG, by country — typhoid_noise_params","title":"Example noise parameters for HlyE_IgA and HlyE_IgG, by country — typhoid_noise_params","text":"Data frame example noise parameters, Country (\"MGH\", \"bangladesh\", \"nepal\") antigen_iso (\"HlyE_IgA\", \"HlyE_IgG\").","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_noise_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example noise parameters for HlyE_IgA and HlyE_IgG, by country — typhoid_noise_params","text":"","code":"typhoid_noise_params"},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_noise_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example noise parameters for HlyE_IgA and HlyE_IgG, by country — typhoid_noise_params","text":"parameters : llod nu y.high eps","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/typhoid_noise_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example noise parameters for HlyE_IgA and HlyE_IgG, by country — typhoid_noise_params","text":"","code":"# Show the data: typhoid_noise_params #> # A tibble: 8 × 6 #>   Country    antigen_iso  llod    nu  y.high   eps #>   <chr>      <chr>       <dbl> <dbl>   <dbl> <dbl> #> 1 MGH        HlyE_IgA    0.179  2.87 5000000 0.240 #> 2 bangladesh HlyE_IgA    0.179  2.87 5000000 0.280 #> 3 nepal      HlyE_IgA    0.179  2.87 5000000 0.238 #> 4 pakistan   HlyE_IgA    0.179  2.87 5000000 0.279 #> 5 MGH        HlyE_IgG    0.645  3.03 5000000 0.164 #> 6 bangladesh HlyE_IgG    0.645  3.03 5000000 0.306 #> 7 nepal      HlyE_IgG    0.645  3.03 5000000 0.128 #> 8 pakistan   HlyE_IgG    0.645  3.03 5000000 0.146"},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn.missing.strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn.missing.strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn.missing.strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn.missing.strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn.missing.strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn_missing_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn_missing_strata","title":"Warn about missing stratifying variables in a dataset — warn_missing_strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn_missing_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn_missing_strata","text":"","code":"warn_missing_strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn_missing_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn_missing_strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn_missing_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn_missing_strata","text":"character() vector subset stratifying variables present data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/reference/warn_missing_strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn_missing_strata","text":"","code":"if (FALSE) { expected_strata = data.frame(Species = \"banana\", type = \"orchid\") warn_missing_strata(iris, expected_strata, dataname = \"iris\") }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"V1.3.0","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"our-standards","dir":"V1.3.0","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"V1.3.0","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"scope","dir":"V1.3.0","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"enforcement","dir":"V1.3.0","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"V1.3.0","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"V1.3.0","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"V1.3.0","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"V1.3.0","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"V1.3.0","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CODE_OF_CONDUCT.html","id":"attribution","dir":"V1.3.0","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":null,"dir":"V1.3.0","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":"fixing-typos","dir":"V1.3.0","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":"bigger-changes","dir":"V1.3.0","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":"pull-request-process","dir":"V1.3.0","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":"code-style","dir":"V1.3.0","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/CONTRIBUTING.html","id":"code-of-conduct","dir":"V1.3.0","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"introduction","dir":"V1.3.0 > Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"load-packages","dir":"V1.3.0 > Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"load-data","dir":"V1.3.0 > Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"V1.3.0 > Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"V1.3.0 > Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"V1.3.0 > Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"V1.3.0 > Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in count_strata(., strata_varnames): The number of observations in `data` varies between antigen isotypes, for at least one stratum. Sample size for each stratum will be calculated as the minimum number of observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"conclusions","dir":"V1.3.0 > Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"acknowledgments","dir":"V1.3.0 > Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/enteric_fever_example.html","id":"funding","dir":"V1.3.0 > Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/index.html","id":null,"dir":"V1.3.0 > Articles","previous_headings":"","what":"All vignettes","title":"Articles","text":"Enteric Fever Seroincidence Vignette  Methodology  Scrub Typhus Seroincidence Vignette  Introduction serocalculator summary methods behind serocalculator. Generate simulated cross-sectional sample estimate seroincidence","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"overview","dir":"V1.3.0 > Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"defining-incidence","dir":"V1.3.0 > Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period [@Noordzij2010diseasemeasures]. Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"V1.3.0 > Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"scale-of-incidence-rates","dir":"V1.3.0 > Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"V1.3.0 > Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"V1.3.0 > Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"V1.3.0 > Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"modeling-assumptions","dir":"V1.3.0 > Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"V1.3.0 > Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"V1.3.0 > Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"example-log-likelihood-curves","dir":"V1.3.0 > Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"standard-error","dir":"V1.3.0 > Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"likelihood-of-observed-data","dir":"V1.3.0 > Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"antibody-response-curves","dir":"V1.3.0 > Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"putting-it-all-together","dir":"V1.3.0 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"composing-the-likelihood","dir":"V1.3.0 > Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"finding-the-mle-numerically","dir":"V1.3.0 > Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"V1.3.0 > Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse [@Teunis_2016]. first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"model-for-active-infection-period","dir":"V1.3.0 > Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model [@volterra1928variations] pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"V1.3.0 > Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"putting-it-all-together-1","dir":"V1.3.0 > Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai = \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 =   curves %>%   filter(     # iter %in% 1:10,     iter == 5,          antigen_iso == cur_ai)  library(ggplot2)  curve1 %>% serocalculator:::plot_curve_params_one_ab(   log_y = FALSE ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(xintercept = curve1$t1,         col = \"t1\")   ) +    geom_hline(     aes(yintercept = curve1$y0,         col = \"y0\")   ) +     geom_hline(     aes(yintercept = curve1$y1,         col = \"y1\")   ) +   # geom_point(   #   data = curve1,   #   aes(   #     x = t1,   #     y = y1,   #     col = \"(t1,y1)\"   #   )   # ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"biological-noise","dir":"V1.3.0 > Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/methodology.html","id":"measurement-noise","dir":"V1.3.0 > Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source, include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"introduction","dir":"V1.3.0 > Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"methods","dir":"V1.3.0 > Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"V1.3.0 > Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"V1.3.0 > Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"load-packages","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"load-data","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"check-formatting","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"V1.3.0 > Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"V1.3.0 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"V1.3.0 > Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"V1.3.0 > Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/scrubTyphus_example.html","id":"funding","dir":"V1.3.0 > Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/serocalculator.html","id":"overview","dir":"V1.3.0 > Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"V1.3.0 > Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"V1.3.0 > Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/serocalculator.html","id":"the-serocalculator-app","dir":"V1.3.0 > Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" %>%   load_curve_params() %>%   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc %>% autoplot(n_curves = 50) dmcmc %>% autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc %>%   graph.curve.params(antigen_isos = antibodies) %>%   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) # generate cross-sectional data csdata <- sim.cs(   curve_params = dmcmc,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"ggplot(csdata, aes(   x = as.factor(antigen_iso),   y = value )) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) %>%   print() #> [1] -240.1535  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) %>%   print() #> [1] -339.8803  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) %>%   print() #> [1] -580.0338  print(ll_a + ll_g) #> [1] -580.0338"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"V1.3.0 > Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = TRUE, # print updates as the function runs   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) #> nrow(curve_params) = 998 #> Initial negative log-likelihood: 580.033839865286 #> building likelihood graph #> about to call `nlm()` #> iteration = 0 #> Step: #> [1] 0 #> Parameter: #> [1] -2.302585 #> Function Value #> [1] 580.0338 #> Gradient: #> [1] -43.94475 #>  #> iteration = 1 #> Step: #> [1] 0.4684939 #> Parameter: #> [1] -1.834091 #> Function Value #> [1] 565.4921 #> Gradient: #> [1] -18.4184 #>  #> iteration = 2 #> Step: #> [1] 0.3380391 #> Parameter: #> [1] -1.496052 #> Function Value #> [1] 563.1786 #> Gradient: #> [1] 6.088605 #>  #> iteration = 3 #> Step: #> [1] -0.08398361 #> Parameter: #> [1] -1.580036 #> Function Value #> [1] 562.9676 #> Gradient: #> [1] -0.665958 #>  #> iteration = 4 #> Step: #> [1] 0.008280263 #> Parameter: #> [1] -1.571755 #> Function Value #> [1] 562.9636 #> Gradient: #> [1] -0.9964423 #>  #> iteration = 5 #> Step: #> [1] 0.002099482 #> Parameter: #> [1] -1.569656 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 1.11877 #>  #> iteration = 6 #> Step: #> [1] -1.66162e-05 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] 0.1425471 #>  #> iteration = 7 #> Parameter: #> [1] -1.569673 #> Function Value #> [1] 562.9634 #> Gradient: #> [1] -0.008628721 #>  #> Last global step failed to locate a point lower than x. #> Either x is an approximate local minimum of the function, #> the function is too non-linear for this algorithm, #> or steptol is too large. #> Warning in est.incidence(pop_data = csdata, curve_params = dmcmc, noise_params = cond, : `nlm()` may not have reached the maximum likelihood estimate. #> `nlm()` completed with the following convergence code: #> 3: Last global step failed to locate a point lower than x. Either x is an approximate local minimum of the function, the function is too non-linear for this algorithm, or `stepmin` in `est.incidence()` (a.k.a. `steptol` in `nlm()`) is too large. #>  #> Elapsed time: #>    user  system elapsed  #>   0.423   0.000   0.423 summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.208 0.0137  0.183  0.237     0.95   -563.          7 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"V1.3.0 > Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 10 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2)  sim_df <-   sim.cs.multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n.smpl = nrep,     age.rng = lifespan,     antigen_isos = antibodies,     renew.params = TRUE,     add.noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 8,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.875       0.05       1 #>  2  3.53 1     HlyE_IgG    0.612       0.05       1 #>  3  2.27 2     HlyE_IgA    0.599       0.05       1 #>  4  2.27 2     HlyE_IgG    0.481       0.05       1 #>  5  9.05 3     HlyE_IgA    0.577       0.05       1 #>  6  9.05 3     HlyE_IgG    0.440       0.05       1 #>  7  5.94 4     HlyE_IgA    0.873       0.05       1 #>  8  5.94 4     HlyE_IgG    0.866       0.05       1 #>  9  9.88 5     HlyE_IgA    0.633       0.05       1 #> 10  9.88 5     HlyE_IgG    0.152       0.05       1 #> # ℹ 7,990 more rows sim_df %>% ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"V1.3.0 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = TRUE,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) #> ℹ Data has been stratified. #> ℹ Here are the strata that will be analyzed: #>  #> # A tibble: 40 × 4 #>    Stratum    lambda.sim cluster     n #>    <chr>           <dbl>   <int> <int> #>  1 Stratum 1        0.05       1   100 #>  2 Stratum 2        0.05       2   100 #>  3 Stratum 3        0.05       3   100 #>  4 Stratum 4        0.05       4   100 #>  5 Stratum 5        0.05       5   100 #>  6 Stratum 6        0.05       6   100 #>  7 Stratum 7        0.05       7   100 #>  8 Stratum 8        0.05       8   100 #>  9 Stratum 9        0.05       9   100 #> 10 Stratum 10       0.05      10   100 #> # ℹ 30 more rows #> Setting up parallel processing with `num_cores` = 3. #> ℹ Elapsed time for parallelized code: #>    user  system elapsed  #>   0.146   0.029  16.869 summary(ests) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 40 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0680 0.0108  0.0498 #>  2 Stratum 2        0.05       2   100       0.1         0.0603 0.00949 0.0443 #>  3 Stratum 3        0.05       3   100       0.1         0.0556 0.00925 0.0401 #>  4 Stratum 4        0.05       4   100       0.1         0.0568 0.00972 0.0406 #>  5 Stratum 5        0.05       5   100       0.1         0.0350 0.00719 0.0234 #>  6 Stratum 6        0.05       6   100       0.1         0.0558 0.00915 0.0405 #>  7 Stratum 7        0.05       7   100       0.1         0.0687 0.0109  0.0503 #>  8 Stratum 8        0.05       8   100       0.1         0.0404 0.00787 0.0276 #>  9 Stratum 9        0.05       9   100       0.1         0.0458 0.00826 0.0322 #> 10 Stratum 10       0.05      10   100       0.1         0.0423 0.00791 0.0293 #> # ℹ 30 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) summary(ests) %>%   DT::datatable() %>%   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"V1.3.0 > Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"summary(ests) %>%   as_tibble() %>% # removes extra meta-data   select(Stratum, nlm.convergence.code) %>%   filter(nlm.convergence.code > 2) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> # A tibble: 8 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 12 3                    #> 2 Stratum 13 3                    #> 3 Stratum 21 3                    #> 4 Stratum 29 3                    #> 5 Stratum 31 3                    #> 6 Stratum 34 3                    #> 7 Stratum 36 3                    #> 8 Stratum 39 3 problem_strata <-   which(summary(ests)$nlm.convergence.code > 2) %>%   print() #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> [1] 12 13 21 29 31 34 36 39 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"V1.3.0 > Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) summary(ests) %>%   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_abline(     ggplot2::aes(intercept = 0, slope = 1)   ) #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced #> Warning in FUN(X[[i]], ...): `nlm()` produced a negative hessian; something is wrong with the numerical derivatives. #> The standard error of the incidence rate estimate cannot be calculated. #> Warning in sqrt(var.log.lambda): NaNs produced"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/authors.html","id":null,"dir":"V1.3.0","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/authors.html","id":"citation","dir":"V1.3.0","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0, https://ucd-serg.github.io/serocalculator/, https://github.com/UCD-SERG/serocalculator.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0,     https://ucd-serg.github.io/serocalculator/},   url = {https://github.com/UCD-SERG/serocalculator}, }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"serocalculator","dir":"V1.3.0","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"installing-r","dir":"V1.3.0","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"installing-the-serocalculator-package","dir":"V1.3.0","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"post-installation","dir":"V1.3.0","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"development-version","dir":"V1.3.0","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"a-note-for-windows-users","dir":"V1.3.0","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"during-devtools-installation","dir":"V1.3.0","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"independently","dir":"V1.3.0","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"getting-help","dir":"V1.3.0","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/index.html","id":"contributing-to-this-project","dir":"V1.3.0","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-130","dir":"V1.3.0 > News","previous_headings":"","what":"serocalculator 1.3.0","title":"Changelog","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"new-features-1-3-0","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.3.0","what":"New features","title":"Changelog","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"internal-changes-1-3-0","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.3.0","what":"Internal changes","title":"Changelog","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-120","dir":"V1.3.0 > News","previous_headings":"","what":"serocalculator 1.2.0","title":"Changelog","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-110","dir":"V1.3.0 > News","previous_headings":"","what":"serocalculator 1.1.0","title":"Changelog","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-101","dir":"V1.3.0 > News","previous_headings":"","what":"serocalculator 1.0.1","title":"Changelog","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 1.0.0","title":"Changelog","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-1","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.5.0","title":"Changelog","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-2","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.4.0","title":"Changelog","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-3","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"Changelog","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-4","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1 > serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"Changelog","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-5","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.3.0","title":"Changelog","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"Changelog","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/news/index.html","id":"serocalculator-1-0-1-6","dir":"V1.3.0 > News","previous_headings":"serocalculator 1.0.1","what":"serocalculator 0.1.0","title":"Changelog","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ab.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ab.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ab.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t age infection? par parameters ... arguments passed baseline()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ab.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_curve_params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_curve_params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_curve_params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_curve_params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_curve_params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_noise_params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_noise_params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_noise_params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_noise_params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_noise_params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_pop_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_pop_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_pop_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_pop_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/as_pop_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"V1.3.0 > Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.curve_params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.pop_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.pop_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.pop_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.pop_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.pop_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # Plot the log-likelihood curve autoplot(est2)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  est2sum <- summary(est2)  autoplot(est2sum, \"catchment\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_pop_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_pop_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_pop_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_pop_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_pop_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_strata.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_strata.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_strata.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_strata.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/check_strata.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df.to.array.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df.to.array.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df_to_array.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df_to_array.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df_to_array.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df_to_array.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/df_to_array.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) #> Error: 'df_to_array' is not an exported object from 'namespace:serocalculator' ftable(arr[,,1:5]) #> Error: object 'arr' not found"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/dot-nll.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/dot-nll.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/dot-nll.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/dot-nll.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":"details","dir":"V1.3.0 > Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/est.incidence.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/example_noise_params_pk.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/example_noise_params_pk.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"V1.3.0 > Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/example_noise_params_pk.html","id":"source","dir":"V1.3.0 > Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":"details","dir":"V1.3.0 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":"details","dir":"V1.3.0 > Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/f_dev0.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/fdev.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/fdev.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph.curve.params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph.curve.params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph.curve.params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph.curve.params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph.curve.params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph_loglik.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph_loglik.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph_loglik.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph_loglik.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/graph_loglik.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/index.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Package index","title":"Package index","text":"ab() kinetics antibody (ab) response (power function decay) as_curve_params() Load antibody decay curve parameter as_noise_params() Load noise parameters as_pop_data() Load cross-sectional antibody survey data set autoplot(<curve_params>) graph antibody decay curves antigen isotype autoplot(<pop_data>) Plot distribution antibodies autoplot(<seroincidence>) Plot log-likelihood curve incidence rate estimate autoplot(<seroincidence.>) Plot seroincidence.log-likelihoods autoplot(<summary.seroincidence.>) Plot method summary.seroincidence.objects check_pop_data() Check formatting cross-sectional antibody survey dataset. est.incidence() Find maximum likelihood estimate incidence rate parameter est.incidence.() Estimate Seroincidence example_noise_params_pk Small example noise parameters typhoid graph.curve.params() Graph estimated antibody decay curve graph_loglik() Graph log-likelihood data load_curve_params() Load antibody decay curve parameter samples load_noise_params() Load noise parameters load_pop_data() Load cross-sectional antibody survey data set log_likelihood() Calculate log-likelihood mk_baseline() generate random sample baseline distribution plot_curve_params_one_ab() Graph antibody decay curve model print(<seroincidence>) Print Method seroincidence Object print(<seroincidence.>) Print Method seroincidence.Object print(<summary.seroincidence.>) Print Method Seroincidence Summary Object row_longitudinal_parameter() extract row longitudinal parameter set sees_pop_data_pk_100 Small example cross-sectional data set sees_pop_data_pk_100_old_names Small example cross-sectional data set serocalculator serocalculator-package Estimating Infection Rates Serological Data serocalculator_example() Get path example file sim.cs() Simulate cross-sectional serosurvey noise sim.cs.multi() Simulate multiple data sets simcs.tinf() collect cross-sectional data simresp.tinf() simulate antibody kinetics y time interval strata() Extract strata object strata(<seroincidence.>) Extract Strata attribute object, present `[`(<seroincidence.>) Extract replace parts seroincidence.object summary(<pop_data>) print(<summary.pop_data>) Summarize cross-sectional antibody survey data summary(<seroincidence>) Summarizing fitted seroincidence models summary(<seroincidence.>) Summary Method \"seroincidence.\" Objects typhoid_curves_nostrat_100 Small example antibody response curve parameters typhoid warn.missing.strata() Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ldpar.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies  ldpar() renamed row_longitudinal_parameter() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ldpar.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ldpar.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/ldpar.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/llik.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/llik.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_curve_params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_curve_params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_curve_params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_curve_params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_curve_params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_noise_params.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_noise_params.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_noise_params.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_noise_params.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_noise_params.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_pop_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_pop_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_pop_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_pop_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/load_pop_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/log_likelihood.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/log_likelihood.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/log_likelihood.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/log_likelihood.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/log_likelihood.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mk_baseline.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mk_baseline.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mk_baseline.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mk_baseline.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mkbaseline.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"generate random sample from baseline distribution — mkbaseline","title":"generate random sample from baseline distribution — mkbaseline","text":"mkbaseline() renamed mk_baseline() create consistent API.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mkbaseline.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mkbaseline","text":"","code":"mkbaseline(kab, n = 1, blims, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mkbaseline.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mkbaseline","text":"kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/mkbaseline.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mkbaseline","text":"numeric() vector","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"V1.3.0 > Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.seroincidence.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.summary.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.summary.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/reexports.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/row_longitudinal_parameter.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — row_longitudinal_parameter","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/row_longitudinal_parameter.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"","code":"row_longitudinal_parameter(age, antigen_isos, nmc, npar, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/row_longitudinal_parameter.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/row_longitudinal_parameter.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — row_longitudinal_parameter","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"V1.3.0 > Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100.html","id":"source","dir":"V1.3.0 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"V1.3.0 > Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"V1.3.0 > Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Estimating Infection Rates from Serological Data — serocalculator","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"package translates antibody levels measured (cross-sectional) population sample estimate frequency seroconversions (infections) occur sampled population.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator.html","id":"details","dir":"V1.3.0 > Reference","previous_headings":"","what":"Details","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"_PACKAGE","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator.html","id":"references","dir":"V1.3.0 > Reference","previous_headings":"","what":"References","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Methods estimating seroincidence Teunis, P. F. M., J. C. H. van Eijkeren. \"Estimation seroconversion rates infectious diseases: Effects age noise.\" Statistics Medicine 39, . 21 (2020): 2799-2814. Teunis, P. F. M., J. C. H. van Eijkeren, W. F. de Graaf, . Bonačić Marinović, M. E. E. Kretzschmar. \"Linking seroresponse infection within-host heterogeneity antibody production.\" Epidemics 16 (2016): 33-39. Applications Aiemjoy, Kristen, Jessica C. Seidman, Senjuti Saha, Sira Jam Munira, Mohammad Saiful Islam Sajib, Syed Muktadir Al Sium, Anik Sarkar et al. \"Estimating typhoid incidence community-based serosurveys: multicohort study.\" Lancet Microbe 3, . 8 (2022): e578-e587. Aiemjoy, Kristen, John Rumunu, Juma John Hassen, Kirsten E. Wiens, Denise Garrett, Polina Kamenskaya, Jason B. Harris et al. \"Seroincidence enteric fever, Juba, South Sudan.\" Emerging infectious diseases 28, . 11 (2022): 2316. Monge, S., Teunis, P. F., Friesema, ., Franz, E., Ang, W., van Pelt, W., Mughini-Gras, L. \"Immune response-eliciting exposure Campylobacter vastly exceeds incidence clinically overt campylobacteriosis associated similar risk factors: nationwide serosurvey Netherlands\" Journal Infection, 2018, 1–7, doi:10.1016/j.jinf.2018.04.016 Kretzschmar, M., Teunis, P. F., Pebody, R. G. \"Incidence reproduction numbers pertussis: estimates serological social contact data five European countries\" PLoS Medicine 7, . 6 (June 1, 2010):e1000291. doi:10.1371/journal.pmed.1000291. Simonsen, J., Strid, M. ., Molbak, K., Krogfelt, K. ., Linneberg, ., Teunis, P. \"Sero-epidemiology tool study incidence Salmonella infections humans\" Epidemiology Infection 136, . 7 (July 1, 2008): 895–902. doi:10.1017/S0950268807009314 Simonsen, J., Teunis, P. F., van Pelt, W., van Duynhoven, Y., Krogfelt, K. ., Sadkowska-Todys, M., Molbak K. \"Usefulness seroconversion rates comparing infection pressures countries\" Epidemiology Infection, April 12, 2010, 1–8. doi:10.1017/S0950268810000750. Falkenhorst, G., Simonsen, J., Ceper, T. H., van Pelt, W., de Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Jernberg, C., Rota, M. C., van Duynhoven, Y. T., Teunis, P. F., Krogfelt, K. ., Molbak, K. \"Serological cross-sectional studies salmonella incidence eight European countries: correlation incidence reported cases\" BMC Public Health 12, . 1 (July 15, 2012): 523–23. doi:10.1186/1471-2458-12-523. Teunis, P. F., Falkenhorst, G., Ang, C. W., Strid, M. ., De Valk, H., Sadkowska-Todys, M., Zota, L., Kuusi, M., Rota, M. C., Simonsen, J. B., Molbak, K., Van Duynhoven, Y. T., van Pelt, W. \"Campylobacter seroconversion rates selected countries European Union\" Epidemiology Infection 141, . 10 (2013): 2051–57. doi:10.1017/S0950268812002774. de Melker, H. E., Versteegh, F. G., Schellekens, J. F., Teunis, P. F., Kretzschmar, M. \"incidence Bordetella pertussis infections estimated population combination serological surveys\" Journal Infection 53, . 2 (August 1, 2006): 106–13. doi:10.1016/j.jinf.2005.10.020 Quantification seroresponse de Graaf, W. F., Kretzschmar, M. E., Teunis, P. F., Diekmann, O. \"two-phase within-host model immune response application serological profiles pertussis\" Epidemics 9 (2014):1–7. doi:10.1016/j.epidem.2014.08.002. Berbers, G. ., van de Wetering, M. S., van Gageldonk, P. G., Schellekens, J. F., Versteegh, F. G., Teunis, P.F. \"novel method evaluating natural vaccine induced serological responses Bordetella pertussis antigens\" Vaccine 31, . 36 (August 12, 2013): 3732–38. doi:10.1016/j.vaccine.2013.05.073. Versteegh, F. G., Mertens, P. L., de Melker, H. E., Roord, J. J., Schellekens, J. F., Teunis, P. F. \"Age-specific long-term course IgG antibodies pertussis toxin symptomatic infection Bordetella pertussis\" Epidemiology Infection 133, . 4 (August 1, 2005): 737–48. Teunis, P. F., van der Heijden, O. G., de Melker, H. E., Schellekens, J. F., Versteegh, F. G., Kretzschmar, M. E. \"Kinetics IgG antibody response pertussis toxin infection B. pertussis\" Epidemiology Infection 129, . 3 (December 10, 2002):479. doi:10.1017/S0950268802007896.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator.html","id":"author","dir":"V1.3.0 > Reference","previous_headings":"","what":"Author","title":"Estimating Infection Rates from Serological Data — serocalculator","text":"Peter Teunis p.teunis@emory.edu Doug Ezra Morrison demorrison@ucdavis.edu Kristen Aiemjoy kaiemjoy@ucdavis.edu Kristina Lai kwlai@ucdavis.edu","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":"details","dir":"V1.3.0 > Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/serocalculator_example.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(   lambda = 0.1,   n.smpl = 100,   age.rng = c(0, 20),   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   add.noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... additional arguments passed simcs.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"# Load curve parameters curve <-   typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2;  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim.cs(   curve_params = curve,   lambda = lambda,   n.smpl = nrep,   age.rng = lifespan,   antigen_isos = antibodies,   n.mc = 0,   renew.params = TRUE,   add.noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.multi.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"Simulate multiple data sets","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.multi.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   renew.params = TRUE,   add.noise = TRUE,   verbose = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.multi.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim.cs.multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() renew.params whether generate new parameter set infection renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 add.noise logical() indicating whether add biological measurement noise verbose whether report verbose information ... Arguments passed sim.cs lambda numeric() scalar indicating incidence rate (events per person-years) n.smpl number samples simulate age.rng age range sampled individuals, years age.fx specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc many MCMC samples use: n.mc 1:4000 fixed posterior sample used n.mc = 0, random sample chosen noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sim.cs.multi.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim.cs.multi","text":"tibble::tibble()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simcs.tinf.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"output: (age, y(t) set)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simcs.tinf.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n.smpl,   age.rng,   age.fx = NA,   antigen_isos,   n.mc = 0,   renew.params = FALSE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simcs.tinf.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n.smpl number samples n.smpl (= nr simulated records) age.rng age range use simulating data, days age.fx age.fx parameter sample (age.fx = NA age infection) antigen_isos Character vector one antibody names. Values must match curve_params. n.mc n.mc 1:4000 fixed posterior sample used n.mc = 0 random sample chosen renew.params renew.params = TRUE generates new parameter set infection renew.params = FALSE keeps one selected birth, updates baseline y0 ... arguments passed simresp.tinf()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simcs.tinf.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simresp.tinf.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simresp.tinf.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t.end,   age.fx,   antigen_isos,   n.mc = 0,   renew.params,   predpar,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simresp.tinf.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t.end end time interval (beginning time 0) days(?) age.fx parameter estimates fixed age (age.fx years) . age.fx = NA age infection used. antigen_isos antigen isotypes n.mc posterior sample may selected (1:4000), n.mc = 0 posterior sample chosen random. renew.params infection, new parameter sample may generated (renew.params = TRUE). Otherwise (renew.params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed row_longitudinal_parameter, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t age infection? par parameters kab index row antibody baseline limits read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/simresp.tinf.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"function returns list() : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/strata.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/stratify_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/stratify_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% attr(\"antigen_isos\") )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/stratify_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/stratify_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/stratify_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sub-.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sub-.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/sub-.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.pop_data.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.pop_data.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.pop_data.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.pop_data.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.pop_data.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.by.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   showDeviance = TRUE,   showConvergence = TRUE,   ... )"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.by.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability showDeviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. showConvergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. ... Additional arguments affecting summary produced.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.by.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included showDeviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included showConvergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`.  # calculate summary statistics for the seroincidence object summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : catchment  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum catchment     n est.start incidence.rate     SE CI.lwr CI.upr coverage #>   <chr>   <chr>     <int>     <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl> #> 1 Stratu… aku          53       0.1          0.140 0.0216  0.104  0.189     0.95 #> 2 Stratu… kgh          47       0.1          0.200 0.0301  0.149  0.268     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, ...)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability ... unused","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction stepmax small.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/summary.seroincidence.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"V1.3.0 > Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"V1.3.0 > Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/warn.missing.strata.html","id":null,"dir":"V1.3.0 > Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/warn.missing.strata.html","id":"ref-usage","dir":"V1.3.0 > Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/warn.missing.strata.html","id":"arguments","dir":"V1.3.0 > Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/warn.missing.strata.html","id":"value","dir":"V1.3.0 > Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https://ucd-serg.github.io/serocalculator/v1.3.0/reference/warn.missing.strata.html","id":"ref-examples","dir":"V1.3.0 > Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"serocalculator (development version)","text":"sim.cs() -> sim_pop_data() sim.cs.multi() -> sim_pop_data_multi()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"internal-changes-development-version","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serocalculator (development version)","text":"Removed ldpar() API (#345) Added test sim.cs() (#344) Added test internal function ab() (#342) Reverted name change ldpar()-> row_longitudinal_parameter() (#343)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-130","dir":"Changelog","previous_headings":"","what":"serocalculator 1.3.0","title":"serocalculator 1.3.0","text":"CRAN release: 2025-01-25","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"serocalculator 1.3.0","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"internal-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serocalculator 1.3.0","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-120","dir":"Changelog","previous_headings":"","what":"serocalculator 1.2.0","title":"serocalculator 1.2.0","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-110","dir":"Changelog","previous_headings":"","what":"serocalculator 1.1.0","title":"serocalculator 1.1.0","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-101","dir":"Changelog","previous_headings":"","what":"serocalculator 1.0.1","title":"serocalculator 1.0.1","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1","dir":"Changelog","previous_headings":"","what":"serocalculator 1.0.0","title":"serocalculator 1.0.1","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-1","dir":"Changelog","previous_headings":"","what":"serocalculator 0.5.0","title":"serocalculator 1.0.1","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-2","dir":"Changelog","previous_headings":"","what":"serocalculator 0.4.0","title":"serocalculator 1.0.1","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-3","dir":"Changelog","previous_headings":"serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"serocalculator 1.0.1","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-4","dir":"Changelog","previous_headings":"serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"serocalculator 1.0.1","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-5","dir":"Changelog","previous_headings":"","what":"serocalculator 0.3.0","title":"serocalculator 1.0.1","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Changelog","previous_headings":"","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"serocalculator 1.0.1","text":"Added new vignettes.","code":""},{"path":"https://ucd-serg.github.io/serocalculator/news/index.html","id":"serocalculator-1-0-1-6","dir":"Changelog","previous_headings":"","what":"serocalculator 0.1.0","title":"serocalculator 1.0.1","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""}]
